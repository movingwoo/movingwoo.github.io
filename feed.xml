<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://movingwoo.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://movingwoo.com/" rel="alternate" type="text/html" hreflang="ko-KR" /><updated>2025-06-19T02:45:21+00:00</updated><id>https://movingwoo.com/feed.xml</id><title type="html">뭐라도 하겠지</title><subtitle>개발, C++, JAVA, Python, Shortcut, 백준</subtitle><entry><title type="html">17456번 필살! 60단 컴보</title><link href="https://movingwoo.com/boj/c++/2025/06/19/17456.html" rel="alternate" type="text/html" title="17456번 필살! 60단 컴보" /><published>2025-06-19T02:00:00+00:00</published><updated>2025-06-19T02:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/19/17456</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/19/17456.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀!</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/17456">17456번 필살! 60단 컴보 - 백준</a></p>

<p>5년 전이긴 한데 이 문제는 아직도 기억이 생생하다?<br />
당시 이런 고난이도 문제는 익숙하지 않았는데 풀어보겠다고 난리를 피웠다?<br />
제출 현황을 보면 C만 통과해서 Java로는 못푸는 문제인가! 하고 생각 했는데<br />
지금보니 아직도 Java는 한개도 안보인다?</p>

<p>우선 C++로 풀어보고 Java로 포팅해서 되는지 확인한다?</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>2진수로 바꿔서 세면 그만이긴 한데, 정수 a, b, c의 범위가 <span style="color: orange;"><strong>2^60</strong></span> 이다.<br />
숫자가 너무 커서 그냥 세면 시간초과가 날 수 밖에 없다.<br />
따라서 적당히 전처리를 해야한다.</p>

<p>순서대로 보자.<br />
<span style="color: orange;"><strong>1. 테스트케이스 돌리기 전에 최대 60비트까지 가능한 모든 패턴을 계산하는 전처리를 진행한다.</strong></span><br />
<span style="color: orange;"><strong>2. c의 점수를 계산한다.</strong></span><br />
<span style="color: orange;"><strong>3. 0 ~ b 구간 점수와 0 ~ a - 1 구간 점수의 차를 계산한다.</strong></span></p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-전처리">1. 전처리</h5>

<p>0부터 60비트 수까지 가능한 모든 패턴을 계산한다.<br />
테스트케이스도 최대 30만개라서 미리 해놓지 않으면 안된다.</p>

<p>dp[i][j] 는 0 ≤ n &lt; 2^i 중에서 f(n) ≥ j인 개수이며 f(n)은 n의 이진 표현에서 연속된 1 구간들의 길이 제곱 합(실제 점수)이다.<br />
점화식은 <span style="color: orange;"><strong>dp[i][j] = dp[i - 1][j] + Σ(k = 1 to i) dp[i - k - 1][max(0, j - k^2)]</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 전처리 시작, 가능한 모든 패턴을 미리 계산</span>
<span class="n">ull</span> <span class="n">dp</span><span class="p">[</span><span class="n">MAX_BITS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">MAX_SCORE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
<span class="c1">// dp[i][j] = 0 ≤ n &lt; 2^i 중에서 f(n) ≥ j인 개수, f(n)은 n의 이진 표현에서 연속된 1 구간들의 길이 제곱 합</span>
<span class="c1">// 점화식: dp[i][j] = dp[i - 1][j] + Σ(k = 1 to i) dp[i - k - 1][max(0, j - k^2)]</span>

<span class="c1">// 점수 0은 0비트에서만 가능하므로 1개</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">MAX_SCORE</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 0비트에서는 0보다 큰 점수가 존재하지 않음</span>
  <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// i비트 수까지 확장</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">MAX_BITS</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">MAX_SCORE</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
      
    <span class="c1">// 1. 최상위 비트를 0으로 두는 경우 (0xxx 형태)</span>
    <span class="c1">// 연속 1구간이 아니므로 i-1 비트로 j 이상 만드는 경우의 수</span>
    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>

    <span class="c1">// 2. 최상위 비트에서 연속 k개의 1을 쓰는 경우 (110xxx 형태)</span>
    <span class="c1">// 그 다음 비트가 있다면 0으로 강제, 길이 k의 연속 1 구간이 생성되고, 그 다음부터는 새로운 구간</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// k개의 1 다음에 남는 비트 수</span>
      <span class="kt">int</span> <span class="n">zero_bit</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>          
      <span class="k">if</span> <span class="p">(</span><span class="n">zero_bit</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// k == i일 때 모든 비트가 1</span>
        <span class="n">zero_bit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 앞 연속구간 점수 k^2를 제외하고 남은 필요 점수</span>
      <span class="kt">int</span> <span class="n">need_score</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">k</span> <span class="o">*</span> <span class="n">k</span><span class="p">;</span>                
      <span class="k">if</span> <span class="p">(</span><span class="n">need_score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">need_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 남은 비트들로 필요 점수 이상 만들 수 있는 경우의 수</span>
      <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">zero_bit</span><span class="p">][</span><span class="n">need_score</span><span class="p">];</span>         
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 전처리 종료</span>
</code></pre></div></div>

<h5 id="2-c의-점수-구하기">2. c의 점수 구하기</h5>

<p>1로 끝나는 경우 남은 점수 추가에 유의한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">c_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// c의 점수 계산 (연속된 1 구간 길이의 제곱 함)</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_BITS</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 1이면 길이증가, 0이면 점수추가</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="p">{</span>
    <span class="o">++</span><span class="n">len</span><span class="p">;</span>  
  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">c_score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
    <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 1이 남은 경우 점수 추가</span>
<span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">c_score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="3-구간-점수-차-계산">3. 구간 점수 차 계산</h5>

<p>0부터 특정 구간까지 c의 점수보다 높은 점수를 받은 경우의 수를 찾는 함수를 만든다.<br />
그 다음 <span style="color: orange;"><strong>0부터 b 구간까지 찾은 수에서 0부터 a-1 구간까지 찾은 수를 빼면</strong></span> 찾는 답이 나온다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ull</span> <span class="nf">find_score</span><span class="p">(</span><span class="n">ull</span> <span class="n">dp</span><span class="p">[</span><span class="n">MAX_BITS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">MAX_SCORE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">ull</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c_score</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// 60^2를 넘을 경우 예외처리</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c_score</span> <span class="o">&gt;</span> <span class="n">MAX_SCORE</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">ull</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 최상위 비트부터</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">MAX_BITS</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">target</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>

    <span class="c1">// 1이면 0으로 바꿔서 더 작은 수 계산</span>
    <span class="c1">// 0이면 점수추가</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bit</span><span class="p">)</span> <span class="p">{</span>

      <span class="kt">int</span> <span class="n">need_score</span> <span class="o">=</span> <span class="n">c_score</span> <span class="o">-</span> <span class="p">(</span><span class="n">score</span> <span class="o">+</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">need_score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">need_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// i비트로 필요 점수 이상 만들 수 있는 경우의 수</span>
      <span class="n">count</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">need_score</span><span class="p">];</span>
      <span class="o">++</span><span class="n">len</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
          <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// 1이 남은 경우 점수 추가</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
  
  <span class="c1">// 전달받은 a - 1과 b도 포함</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">c_score</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">++</span><span class="n">count</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ... 중략 ...</span>

<span class="c1">// 0 ~ b 구간 점수와 0 ~ a - 1 구간 점수의 차</span>
<span class="n">ull</span> <span class="n">sector_b</span> <span class="o">=</span> <span class="n">find_score</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c_score</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="c1">// a가 0이면 0 처리</span>
<span class="n">ull</span> <span class="n">sector_a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">find_score</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c_score</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">sector_b</span> <span class="o">-</span> <span class="n">sector_a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <h4 id="1차-채점c">1차 채점(C++)</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img02.webp" alt="img02" /></p>

<p>C++로는 통과했다.<br />
5년전 나의 원혼을 달래기 위해 이 코드를 그대로 Java로 포팅해서 2차 시도를 해보자.<br />
PyPy로 통과한 이력은 보이는데 Java로는 불가능한 것인가??</p>

<blockquote>
  <h4 id="2차-채점java">2차 채점(Java)</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img03.webp" alt="img03" /></p>

<p><span style="color: red;"><strong>이게되네</strong></span><br />
흑흑 이거 Java로도 풀 수 있는 문제였어<br />
그냥 옛날의 내가 최적화하지 못한 것 뿐이야</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>다이나믹 프로그래밍 딱지 붙은 문제는 당분간 피하는게 좋겠다.<br />
뇌가 녹아내릴 것 같다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/C%2B%2B/2025-06-19-17456.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="17456" /><category term="필살! 60단 컴보" /><summary type="html"><![CDATA[백준 17456번 필살! 60단 컴보 C++ 문제풀이]]></summary></entry><entry><title type="html">11568번 민균이의 계략</title><link href="https://movingwoo.com/boj/java/2025/06/18/11568.html" rel="alternate" type="text/html" title="11568번 민균이의 계략" /><published>2025-06-18T01:00:00+00:00</published><updated>2025-06-18T01:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/18/11568</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/18/11568.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-11568/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/11568">11568번 민균이의 계략 - 백준</a></p>

<p>5년전 틀렸습니다를 받은 문제.<br />
당시 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="n">cm</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">bf</span><span class="o">=</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">bf</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">cnt</span><span class="o">++;</span>
			<span class="n">bf</span><span class="o">=</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="n">cm</span><span class="o">)</span> <span class="n">cm</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cm</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
</code></pre></div></div>

<p>그리디로 푼 것 같다.<br />
이걸로는 찾지 못한 예외 케이스가 있었겠지.<br />
문제 분류가 <span style="color: orange;"><strong>DP</strong></span>니 그렇게 접근해보자.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>점화식을 세운다.<br />
수열 A[0] 부터 A[N - 1] 이 있을 때 dp[i] 는 i를 마지막으로 하는 부분순열의 길이다.</p>

<p>A[i] 앞에 있는 원소들 중 <span style="color: orange;"><strong>A[j] &lt; A[i]</strong></span> 인 경우만 고려한다.<br />
그 중 가장 긴 부분수열에 A[i]를 붙인다.</p>

<p>기본적으로 자기 자신을 포함하니 <span style="color: orange;"><strong>dp[i] = 1</strong></span> 에서 시작<br />
<span style="color: orange;"><strong>dp[i] = arr[j] &lt; arr[i] ? max(dp[i], dp[j] + 1) : dp[i]</strong></span></p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="no">N</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>

<span class="c1">// DP</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">?</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="c1">// 가장 긴 부분수열</span>
	<span class="n">result</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-11568/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>시간복잡도가 O(N^2) 인데 N이 작아서 상관없다.<br />
1회 틀린 것은 삼항연산자 마지막에 1을 박아둬서 초기화되어서 발생한 문제.<br />
항상 눈을 부릅뜨고 살펴보자.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-18-11568.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="11568" /><category term="민균이의 계략" /><category term="DP" /><summary type="html"><![CDATA[백준 11568번 민균이의 계략 JAVA 문제풀이]]></summary></entry><entry><title type="html">18870번 좌표 압축</title><link href="https://movingwoo.com/boj/java/2025/06/18/18870.html" rel="alternate" type="text/html" title="18870번 좌표 압축" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T00:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/18/18870</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/18/18870.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-18870/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/18870">18870번 좌표 압축 - 백준</a></p>

<p>4년 전의 기록이다.<br />
화려한 시간초과의 향연!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
			
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="k">try</span><span class="o">{</span>
				<span class="nc">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
				<span class="nc">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

				<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>

				<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
				<span class="kt">int</span><span class="o">[]</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

				<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">()){</span>
					<span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="o">}</span>

				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
					<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
						<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">!=</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
							<span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
						<span class="o">}</span>
					<span class="o">}</span>
				<span class="o">}</span>

				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">result</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">" "</span><span class="o">);</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>

			<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>전체 순회하며 결과 배열에 숫자를 하나씩 더해간다.<br />
좀 더 시간을 줄일 수 있게 접근해야한다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>중복되는 요소가 있으니 <span style="color: orange;"><strong>Set을 활용해 중복을 거르고 정렬</strong></span>한다.<br />
TreeSet을 쓰면 되겠다.<br />
그 후 <span style="color: orange;"><strong>순서 인덱스를 매핑해서 원래 배열과 비교</strong></span>해 인덱스를 뽑아주면 된다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>트리셋은 자동 정렬이 되니 손댈 필요가 없다.<br />
맵에 인덱스를 value로 저장 후 원래 배열을 순회하며 맵에서 꺼내다 출력한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 처음 입력받을 배열</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
<span class="c1">// 중복제거 및 정렬용 트리셋</span>
<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 압축 매핑용 맵</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">token</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
	<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 맵에 매핑</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
	<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">(),</span> <span class="n">idx</span><span class="o">++);</span>
<span class="o">}</span>

<span class="c1">// 출력</span>
<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">])).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-18870/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>이상하다 4년전이면 컬렉션 쓰는 법 정도는 알았을 텐데…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-18-18870.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="18870" /><category term="좌표 압축" /><category term="정렬" /><summary type="html"><![CDATA[백준 18870번 좌표 압축 JAVA 문제풀이]]></summary></entry><entry><title type="html">5430번 AC</title><link href="https://movingwoo.com/boj/java/2025/06/17/5430.html" rel="alternate" type="text/html" title="5430번 AC" /><published>2025-06-17T07:00:00+00:00</published><updated>2025-06-17T07:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/17/5430</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/17/5430.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-17-5410/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/5430">5430번 AC - 백준</a></p>

<p>과거의 나는 이걸 왜 틀렸을까?<br />
틀린 문제를 파헤쳐보는 시간 <span style="color: orange;"><strong>이왜틀?</strong></span></p>

<p>대부분 java로 틀렸던 문제들이라 웬만하면 java로 다시 해결하지 않을까 싶다.<br />
아무튼 이 문제는 5년 전에 런타임 에러 1회 이후로 손을 안댄 것 같은데…</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span><span class="n">z</span><span class="o">){</span>
		<span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
				<span class="nc">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">tc</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			<span class="k">while</span><span class="o">(</span><span class="n">tc</span><span class="o">--&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="kt">char</span><span class="o">[]</span> <span class="n">p</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
				<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="kt">boolean</span> <span class="n">chk</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
				<span class="nc">String</span> <span class="n">q</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
				<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">q</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">),</span><span class="s">","</span><span class="o">);</span>
				<span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deq</span><span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
				<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="n">deq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
					<span class="kt">char</span> <span class="n">c</span><span class="o">=</span><span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
					<span class="k">if</span><span class="o">(</span><span class="n">c</span><span class="o">==</span><span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
						<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stk</span><span class="o">=</span><span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
						<span class="k">while</span><span class="o">(!</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">stk</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
						<span class="k">while</span><span class="o">(!</span><span class="n">stk</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">deq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stk</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
					<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
						<span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
							<span class="n">chk</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
							<span class="k">break</span><span class="o">;</span>
						<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
							<span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
						<span class="o">}</span>
					<span class="o">}</span>
				<span class="o">}</span>
				<span class="k">if</span><span class="o">(</span><span class="n">chk</span><span class="o">)</span> <span class="o">{</span>
					<span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
					<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
					<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
						<span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
						<span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
							<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"]"</span><span class="o">);</span>
							<span class="k">break</span><span class="o">;</span>
						<span class="o">}</span>
						<span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">","</span><span class="o">);</span>
					<span class="o">}</span>
					<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
				<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
					<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"error\n"</span><span class="o">);</span>
				<span class="o">}</span>
				
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>디큐를 쓴 건 좋은데 마지막에 <span style="color: orange;"><strong>deq.pollFirst() 이전에 널체크</strong></span>를 했어야 하지 않을까?<br />
모르겠고 머리아프니 새로 짜는게 낫겠다.<br />
주석도 하나도 없어서 보기 싫다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>입력이 고약한게 java 쓰기 싫은데… 그래도 java로 마무리 지어야겠다.<br />
<span style="color: orange;"><strong>그냥 잘 받아서 잘 출력</strong></span>하면 그만인데 왜 틀렸을까</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-그지같은-입력-받기">1. 그지같은 입력 받기</h5>

<p>무조건 깔끔하게 짜는게 목표라서 스캐너를 사용한다.<br />
숫자 리스트는 앞 뒤 대괄호를 떼어주고 분해해서 deque에 넣는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		
<span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">());</span>

<span class="k">while</span><span class="o">(</span><span class="no">T</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">char</span><span class="o">[]</span> <span class="n">p</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
	<span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span> <span class="c1">// n은 쓸데없음</span>
	<span class="nc">String</span> <span class="n">x</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
	<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// 앞뒤 대괄호 제거</span>
	
	<span class="c1">// deque</span>
	<span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
	
	<span class="k">if</span><span class="o">(!</span><span class="n">x</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="s">","</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">deque</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-명령-수행하여-출력">2. 명령 수행하여 출력</h5>

<p>커서 역할을 할 불 값을 두고 R 명령어 시 변경한다.<br />
D 명령어 시 예외처리해주며 poll 한다.</p>

<p>출력 시에는 앞 뒤에 다시 대괄호가 붙어야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">front</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">error</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">oper</span> <span class="o">:</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">oper</span> <span class="o">==</span> <span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">front</span> <span class="o">=</span> <span class="o">!</span><span class="n">front</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// poll 할때만 error check</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">oper</span> <span class="o">==</span> <span class="sc">'D'</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="n">front</span><span class="o">)</span> <span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
		<span class="k">else</span> <span class="n">deque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">error</span><span class="o">)</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"error"</span><span class="o">);</span>
<span class="k">else</span> <span class="o">{</span>
	<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
	
	<span class="c1">// deque 출력</span>
	<span class="k">while</span><span class="o">(!</span><span class="n">deque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
		<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="s">","</span><span class="o">));</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">front</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
		<span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">());</span>
	<span class="o">}</span>
	
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-17-5410/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>입력도 그지같은데 출력도 그지같아서 대괄호 출력 부분에서 실수가 나서 한 번 틀렸다.<br />
5년 전의 나야 내가 너를 구원했단다… 그곳에서는 편안하렴…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-17-5430.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="5430" /><category term="AC" /><category term="구현" /><summary type="html"><![CDATA[백준 5430번 AC JAVA 문제풀이]]></summary></entry><entry><title type="html">3655번 먼저 가세요</title><link href="https://movingwoo.com/boj/python/2025/06/16/3655.html" rel="alternate" type="text/html" title="3655번 먼저 가세요" /><published>2025-06-16T08:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/python/2025/06/16/3655</id><content type="html" xml:base="https://movingwoo.com/boj/python/2025/06/16/3655.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-16-3655/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/3655">3655번 먼저 가세요 - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>쉬워보였는데 생각할게 좀 많다.<br />
양보를 하게되면 그룹의 첫 사람과 마지막 사람의 순서차이 * 5초만큼 이득이다.<br />
공식 잘 만들면 되려나 싶어서 계산해봤는데 너무 복잡하다.<br />
고려할게 너무 많다.</p>

<p>그렇다면 그리디는 어떨까?<br />
큐를 만들어서 넣고 만지작거리는데 너무 오래걸릴 것 같은 예감<br />
그리디도 결국 시뮬레이션인데 넣다 뺐다 하다보니 이게 맞나 싶다.</p>

<p>복잡한 두번째 예제를 보며 다시 정리를 해보자.</p>

<p><span style="color: orange;"><strong>Ab9AAb2bC2</strong></span></p>

<p>양보받은 경우를 가정하고 그룹별로 정리한다면?<br />
그룹의 가장 마지막 사람이 앞으로 당겨오는 느낌으로 정리해야한다.<br />
양보를 하면서 손해가 발생하면 절대 안된다.</p>

<p><span style="color: orange;"><strong>9AAAbbbC22</strong></span></p>

<p>이렇게 하고 각 그룹의 이득을 계산해보면(처음 줄의 마지막 인덱스와 정리 후 마지막 인덱스의 차)<br />
<span style="color: orange;"><strong>A - 1</strong></span><br />
<span style="color: orange;"><strong>b - 1</strong></span><br />
<span style="color: orange;"><strong>9 - 2</strong></span><br />
<span style="color: orange;"><strong>2 - 0</strong></span><br />
<span style="color: orange;"><strong>C - 1</strong></span></p>

<p>여기에 시간 5초와 각 그룹원의 수를 곱해주면<br />
<span style="color: orange;"><strong>1 * 5 * 3 + 1 * 5 * 3 + 2 * 5 * 1 + 0 * 5 * 2 + 1 * 5 * 1 = 45</strong></span><br />
정답이 나왔다.</p>

<p>결국 정렬이 관건으로 보인다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-정렬">1. 정렬</h5>

<p>각 그룹의 전체 인원 수와 최초 상태에서의 마지막 인덱스를 찾아서 리스트로 만든 후 정렬한다.<br />
분명 sort 함수를 쓰면 될건데…</p>

<p>Java나 C는 정렬함수를 커스텀해봤는데 Python은 해본 적이 없다.<br />
일단 그냥 선택정렬을 직접 구현하고 풀고 난 다음에 공부하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
<span class="n">people</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>

<span class="n">count</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">last_index</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># 각 그룹 별 인원 수 카운팅
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">count</span><span class="p">:</span>
        <span class="n">count</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">count</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="c1"># 그룹의 마지막 인덱스
</span>    <span class="n">last_index</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>


<span class="n">groups</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>

<span class="c1"># 그룹의 마지막 인덱스 기준으로 선택 정렬 
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">groups</span><span class="p">)):</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">groups</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">groups</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">j</span>

    <span class="n">groups</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">groups</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="2-절약시간-구하기">2. 절약시간 구하기</h5>

<p>위에서 예제로 확인했듯이 실제 절약된 시간은 (저장해둔 마지막 인덱스 - 현재 마지막 인덱스) * 5 * 인원 수 이다.<br />
정렬한 리스트와 미리 찾아둔 값을 비교하여 계산한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># 실제 절약된 시간 = (저장해둔 마지막 인덱스 - 현재 마지막 인덱스) * 5 * 인원 수
</span><span class="k">for</span> <span class="n">group</span><span class="p">,</span> <span class="n">index</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
    <span class="n">group_count</span> <span class="o">=</span> <span class="n">count</span><span class="p">[</span><span class="n">group</span><span class="p">]</span>
    <span class="n">last_group_idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">group_count</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="n">time</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">last_group_idx</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">group_count</span>

    <span class="n">result</span> <span class="o">+=</span> <span class="n">time</span>
    <span class="n">idx</span> <span class="o">+=</span> <span class="n">group_count</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-16-3655/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>파이썬 sort 함수를 쓰면 어떻게 되는지 확인한다.<br />
람다식을 쓰면 이렇게 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">groups</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>이걸 def로 풀어쓰면 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_last_index</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="n">groups</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">get_last_index</span><span class="p">)</span>
</code></pre></div></div>

<p>풀어쓰니 모양이 익숙한게 자바랑 비슷해보인다.<br />
다음에 정렬할 일 있으면 활용할 수 있겠다.</p>

<p>쉬운문제인줄 알고 대충 풀다가 어? 어? 하면서 갈아엎느라 유독 변수명이 개판된거 같다.<br />
원래 변수명 신경쓰는 편은 아니지만 맘에 걸린다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Python/2025-06-16-3655.py">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Python/" /><category term="PYTHON" /><category term="알고리즘" /><category term="백준" /><category term="3655" /><category term="먼저 가세요" /><category term="정렬" /><summary type="html"><![CDATA[백준 3655번 먼저 가세요 PYTHON 문제풀이]]></summary></entry><entry><title type="html">10722번 Binary Mobile Tree</title><link href="https://movingwoo.com/boj/c++/2025/06/16/10722.html" rel="alternate" type="text/html" title="10722번 Binary Mobile Tree" /><published>2025-06-16T05:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/16/10722</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/16/10722.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-16-10722/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/10722">10722번 Binary Mobile Tree - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>모빌의 크기를 구하는 문제인데 눈여겨볼 조건은 아래인 것 같다.</p>
<ul>
  <li><span style="color: orange;"><strong>양수는 구슬 음수는 막대</strong></span></li>
  <li><span style="color: orange;"><strong>1번 막대가 루트 노드 (-1)</strong></span></li>
  <li><span style="color: orange;"><strong>구슬은 질량만 있고 부피는 없음</strong></span></li>
</ul>

<p>DFS를 사용해서 탐색하며 질량과 막대너비를 전달하면 되겠지 아마</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>재귀호출하며 길이와 질량 정보를 받아 합친다.<br />
<span style="color: orange;"><strong>왼쪽 질량 * 왼쪽 거리 == 오른쪽 질량 * 오른쪽 거리</strong></span> 공식에 따라 양쪽 거리를 구하고<br />
서브트리가 반대로 퍼지는 걸 고려해서 좌우 폭을 구해 더해서 출력한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DFS</span>
<span class="n">tuple</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="o">&gt;</span> <span class="n">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">node</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">bar</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 양수면 구슬, 질량만 있음</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">node</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">};</span>
    <span class="p">}</span>

    <span class="c1">// 음수면 막대</span>
    <span class="k">auto</span> <span class="p">[</span><span class="n">len</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">bar</span><span class="p">[</span><span class="o">-</span><span class="n">node</span><span class="p">];</span>


    <span class="k">auto</span> <span class="p">[</span><span class="n">lm</span><span class="p">,</span> <span class="n">ll</span><span class="p">,</span> <span class="n">lr</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>
    <span class="k">auto</span> <span class="p">[</span><span class="n">rm</span><span class="p">,</span> <span class="n">rl</span><span class="p">,</span> <span class="n">rr</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>

    <span class="kt">double</span> <span class="n">tm</span> <span class="o">=</span> <span class="n">lm</span> <span class="o">+</span> <span class="n">rm</span><span class="p">;</span>

    <span class="c1">// 왼쪽 질량 * 왼쪽 거리 == 오른쪽 질량 * 오른쪽 거리</span>
    <span class="kt">double</span> <span class="n">ldist</span> <span class="o">=</span> <span class="n">len</span> <span class="o">*</span> <span class="p">(</span><span class="n">rm</span> <span class="o">/</span> <span class="n">tm</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">rdist</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="n">ldist</span><span class="p">;</span>

    <span class="c1">// 서브트리가 반대로 퍼지는 경우를 고려해야함</span>
    <span class="kt">double</span> <span class="n">lw</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="o">-</span><span class="n">ldist</span> <span class="o">-</span> <span class="n">ll</span><span class="p">,</span> <span class="n">rdist</span> <span class="o">-</span> <span class="n">rl</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">rw</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="o">-</span><span class="n">ldist</span> <span class="o">+</span> <span class="n">lr</span><span class="p">,</span> <span class="n">rdist</span> <span class="o">+</span> <span class="n">rr</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span><span class="n">tm</span><span class="p">,</span> <span class="o">-</span><span class="n">lw</span><span class="p">,</span> <span class="n">rw</span><span class="p">};</span>
<span class="p">}</span>

<span class="c1">// ... 중략 ...</span>

<span class="c1">// 루트 노드는 -1</span>
<span class="k">auto</span> <span class="p">[</span><span class="n">mass</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>

<span class="n">printf</span><span class="p">(</span><span class="s">"%.6f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-16-10722/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>auto 사용에 더 익숙해져야겠다.<br />
좋은 건 잘 써먹어야지<br />
엄청 깨끗하고 짧고 좋지 않은가?</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/C%2B%2B/2025-06-16-10722.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="10722" /><category term="Binary Mobile Tree" /><category term="DFS" /><summary type="html"><![CDATA[백준 10722번 Binary Mobile Tree C++ 문제풀이]]></summary></entry><entry><title type="html">24008번 Catch Them All</title><link href="https://movingwoo.com/boj/java/2025/06/13/24008.html" rel="alternate" type="text/html" title="24008번 Catch Them All" /><published>2025-06-13T07:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/13/24008</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/13/24008.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-13-24008/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/24008">24008번 Catch Them All - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>Codejamon GO 게임을 한다.<br />
도시는 1부터 N까지 장소가 있으며 M개의 양방향 도로가 있고 <span style="color: orange;"><strong>시작 지점은 항상 1</strong></span>이다.</p>

<p>Codejamon이 랜덤 장소에 등장하면 가장 빠른 경로로 이동해 잡는다.<br />
잡은 즉시 다른 랜덤 위치에 Codejamon이 나타난다.</p>

<p>총 P마리 Codejamon을 잡을 때 기대 소요 시간을 구하시오.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>푸키먼 고를 흉내낸 문제.</p>

<p>현재 장소를 제외한 무작위 위치에 푸키먼이 등장하는데<br />
우선 각 위치에서 다른 모든 위치까지의 최단 거리를 알아야한다.</p>

<p>거리를 알게되면 이동시간을 구할 수 있고 이동시간을 알면 평균을 낼 수 있다.<br />
이를 P번 반복해서 기대 소요 시간을 구한다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-그래프-그리기">1. 그래프 그리기</h5>

<p>입력받아서 그래프를 그려준다.<br />
<span style="color: orange;"><strong>중복 간선이 없다는게 보장</strong></span>되므로 그냥 쑥쑥 집어넣기만 하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
	<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">))){</span>
	
	<span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span>
	
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="no">T</span> <span class="o">;</span> <span class="n">t</span><span class="o">++)</span> <span class="o">{</span>
		
		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">(),</span> <span class="s">" "</span><span class="o">);</span>
		<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="kt">int</span> <span class="no">P</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		
		<span class="c1">// 그래프 초기화</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="c1">// U V D가 크지않아서 적당히 큰 값 세팅</span>
				<span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">100000</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="c1">// 간선 등록</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">M</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">(),</span> <span class="s">" "</span><span class="o">);</span>
			
			<span class="kt">int</span> <span class="no">U</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">V</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">D</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="c1">// 양방향</span>
			<span class="n">dist</span><span class="o">[</span><span class="no">U</span><span class="o">][</span><span class="no">V</span><span class="o">]</span> <span class="o">=</span> <span class="no">D</span><span class="o">;</span>
			<span class="n">dist</span><span class="o">[</span><span class="no">V</span><span class="o">][</span><span class="no">U</span><span class="o">]</span> <span class="o">=</span> <span class="no">D</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-최단거리">2. 최단거리</h5>

<p><span style="color: orange;"><strong>플로이드 워셜 알고리즘</strong></span>을 사용한다.<br />
시간 복잡도가 O(N^3) 인데 N이 크지가 않아서 괜찮을거다.<br />
다익스트라보다 간단하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 플로이드 워셜 알고리즘</span>
<span class="c1">// 경유지 k가 가장 바깥</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
			<span class="c1">// k 를 경유해서 가는게 더 빠르면 갱신</span>
			<span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="n">dist</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">])</span> <span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="3-시간-계산">3. 시간 계산</h5>

<p>원래 대충 근사값 계산했는데 계속 틀렸다고해서 수학공부를 좀 진행해야했다.<br />
단순 근사값 계산 대신 <span style="color: orange;"><strong>마르코프 체인</strong></span>을 활용해 P (최대 10^9) 에 대한 누적 기대 시간을 효율적으로 추정한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 시간 계산</span>
<span class="c1">// 첫번째는 반드시 1번에서 출발</span>
<span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">start</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
<span class="n">start</span> <span class="o">/=</span> <span class="o">(</span><span class="kt">double</span><span class="o">)(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

<span class="c1">// 같은 위치 제외 모든 거리의 평균</span>
<span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
		
		<span class="n">result</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="c1">// N * (N - 1)</span>
<span class="n">result</span> <span class="o">/=</span> <span class="o">(</span><span class="no">N</span> <span class="o">*</span> <span class="o">(</span><span class="kt">double</span><span class="o">)(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>

<span class="c1">// 근사값 계산했더니 틀려서 상세하게 접근</span>
<span class="c1">// 람다</span>
<span class="kt">double</span> <span class="n">lambda</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span> <span class="o">/</span> <span class="o">(</span><span class="no">N</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
<span class="c1">// 기하급수 합</span>
<span class="kt">double</span> <span class="n">geoSum</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">lambda</span><span class="o">,</span> <span class="no">P</span><span class="o">))</span> <span class="o">/</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">lambda</span><span class="o">);</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="no">P</span> <span class="o">+</span> <span class="o">(</span><span class="n">start</span> <span class="o">-</span> <span class="n">result</span><span class="o">)</span> <span class="o">*</span> <span class="n">geoSum</span><span class="o">;</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Case #%d: %.6f\n"</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-13-24008/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>이상한 일이 있다.<br />
분명히 처음에 예제 입력이 너무 개판이었다.<br />
한 줄에 3개씩 숫자가 들어와야하는데 4개 2개 이렇게 개판으로 들어와서 입력을 희한하게도 주네 했는데<br />
<span style="color: red;"><strong>문제 맞추고 다시 보니 예제가 3개씩 들어오는 것으로 정상화 되어있다.</strong></span></p>

<p><span style="color: red;"><strong>최면 걸렸나? 사이버 귀신인가?</strong></span></p>

<p>그래서 다시 입력받는 부분 간소화하고 돌렸더니 메모리와 시간이 확 줄었다.<br />
진짜 무슨 일이 일어난거지</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-13-24008.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="24008" /><category term="Catch Them All" /><category term="최단거리" /><summary type="html"><![CDATA[백준 24008번 Catch Them All JAVA 문제풀이]]></summary></entry><entry><title type="html">16256번 Painting the Wall</title><link href="https://movingwoo.com/boj/c++/2025/06/13/16256.html" rel="alternate" type="text/html" title="16256번 Painting the Wall" /><published>2025-06-13T01:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/13/16256</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/13/16256.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-13-16256/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/16256">16256번 Painting the Wall - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>정사각형 타일로 구성된 n * m 사이즈의 벽이 있다.<br />
타일의 일부는 램프다.(0이면 램프 1이면 타일)</p>

<p>타일에 페인트를 칠하려 한다.<br />
<span style="color: orange;"><strong>수직 또는 수평으로 연속된 타일이 있을 때 각 타일은 모두 다른 색의 페인트로 칠해야한다.</strong></span><br />
서로 다른 색상의 페인트 k개가 있을 때 모두 다른 색상으로 벽을 칠할 수 있으면 YES와 페인트칠 한 예시를<br />
불가능하면 NO를 출력한다.</p>

<p>k개의 페인트를 모두 사용할 필요는 없다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>페인트칠 불가능한 조건부터 생각해보자.<br />
<span style="color: orange;"><strong>타일이 연속된 구간 중 가장 긴 구간의 길이가 k보다 크면 색칠이 불가능</strong></span>하다.<br />
가령 1 1 1 인 경우 연속 구간의 페인트 색은 모두 달라야 하기 때문에 k가 3보다 작다면 NO를 출력해야한다.</p>

<p>구간 확인 후 색칠이 가능하면 각 연속 구간 내 1부터 k까지 칠해서 출력한다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-불가능한-경우">1. 불가능한 경우</h5>

<p>타일이 연속되는 구간을 확인해 k와 비교해서 페인트칠 가능한지 확인한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">wall</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">));</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">paintable</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

<span class="c1">// 연속된 행 방향 타일 구간 탐색</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">paintable</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">paintable</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 연속된 열 방향 타일 구간 탐색</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">paintable</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">paintable</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">paintable</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"NO</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="2-가능한-경우">2. 가능한 경우</h5>

<p>색칠이 가능하면 겹치지 않게 숫자를 매긴다.<br />
겹치지만 않으면 되므로 mod 연산으로 대충 뿌려준다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 가능하면 페인트칠</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">painted_wall</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 모든 행열 구간에서 중복되지 않게</span>
            <span class="n">painted_wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="n">k</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>    

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"YES</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">painted_wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-13-16256/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>벡터가 아니라 배열로 쓰면 더 나았으려나?<br />
java면 배열로 했겠지만 C++라서 벡터를 사용한건데</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/C%2B%2B/2025-06-13-16256.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="16256" /><category term="Painting the Wall" /><summary type="html"><![CDATA[백준 16256번 Painting the Wall C++ 문제풀이]]></summary></entry><entry><title type="html">제비 뽑기</title><link href="https://movingwoo.com/development/shortcuts/2025/06/11/Drawing-Lots.html" rel="alternate" type="text/html" title="제비 뽑기" /><published>2025-06-11T02:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/development/shortcuts/2025/06/11/Drawing%20Lots</id><content type="html" xml:base="https://movingwoo.com/development/shortcuts/2025/06/11/Drawing-Lots.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p>점심 먹고 커피를 누가 살지, 술 마시고 대표로 누가 결제할지 등<br />
각종 내기할 때 준비물이 필요 없고 밸런스가 잘 맞는 게임은 가위바위보가 있다.<br />
좀 더 익스트림한 경험을 원하면 사다리타기나 핀볼을 하기도 한다.</p>

<p>오늘은 단축어로 내기에 쓸 수 있는 제비뽑기를 만들어 볼 것이다.<br />
js를 사용하지 않으면 GUI가 극적이진 않지만 직접 만들어서 사용하면 제법 재미있다.</p>

<p>단축어 js 연동은 다소 불편하기도 하고…</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>입력을 받을 때 인원 수에 따라 항목은 얼마든지 늘어날 수 있게 설정해야한다.</p>

<p>입력 받으면 무작위 셔플 후 각각에 인덱스를 부여해 하나의 제비로 만든다.<br />
제비 클래스를 구현할 수는 없으므로 <span style="color: orange;"><strong>사전</strong></span>을 사용하는게 좋겠다.</p>

<p>각 제비는 하나를 선택해 하나씩 열어볼 수 있게하고<br />
전체를 한 번에 열어볼 수 있게도 만든다.</p>

<p>어떤 단축어 블럭을 사용할지 고민하는게 어렵고 로직 자체는 심플하다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-목록-입력받아-사전-생성">1. 목록 입력받아 사전 생성</h5>

<p>기본 값으로 당첨 하나와 꽝 2개 총 3개 항목을 설정하고 보여준다.<br />
당첨과 꽝 문구는 변경할 수 있게 하고 항목을 추가할 수 있게 한다.</p>

<p>필터 블럭으로 제비를 무작위 셔플하고 목록 수 만큼 반복문을 구성한다.<br />
3가지 작업을 하게 되는데</p>
<ul>
  <li><span style="color: orange;"><strong>인덱스와 셔플된 값으로 사전</strong></span> 구성</li>
  <li>목록을 선택할 수 있게 별도 <span style="color: orange;"><strong>인덱스 변수</strong></span> 구성</li>
  <li>전체 보기 시 출력할 <span style="color: orange;"><strong>텍스트 변수</strong></span> 구성</li>
</ul>

<p>전체 보기의 경우 뒤에서 사용하게 될건데<br />
결과 보기 블럭에 사전을 그냥 넣을 경우 json 형식으로 출력한다.<br />
보기 불편하기 때문에 결과를 텍스트로 미리 다듬어서 변수로 선언해두고<br />
전체 보기 할 경우 해당 텍스트 변수를 출력한다.</p>

<p>반복문이 종료되면 사용자에게 보여줄 목록 변수에 ‘전체 보기’ 항목을 넣어서 한 번에 전체를 볼 수 있게 한다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img01.webp" alt="img01" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img02.webp" alt="img02" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img03.webp" alt="img03" width="300" style="height: auto;" /></p>

<h5 id="2-반복문과-조건문">2. 반복문과 조건문</h5>

<p>반복 블럭을 새로 구성해서 인덱스 변수를 목록으로 보여준다.</p>

<p>만약 전체 보기를 선택할 경우에 미리 선언해둔 전체 보기 변수를 출력 후 단축어를 종료한다.<br />
그렇지 않으면 해당 인덱스의 값을 사전에서 가져와 출력한다.<br />
사전에서 값을 가져오면 인덱스 변수에서 선택한 값을 필터 블럭으로 제거해 남은 제비만을 다시 보여준다.</p>

<p>모든 제비를 열어보았다면 전체 보기 변수를 출력해 최종 결과를 출력한다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img04.webp" alt="img04" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img05.webp" alt="img05" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img06.webp" alt="img06" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p><span style="color: red;"><strong>당첨자는 오늘 커피를 산다!!!</strong></span></p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img07.webp" alt="img07" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>ios 판올림할 때마다 단축어도 조금씩 바뀌는데<br />
원래 반복 블럭에 for each처럼 쓰는게 있었나 기억이 안난다.</p>

<p>사전 값 출력하려고 각각 반복 블럭을 사용해봤는데 예상한대로 동작하지 않아서 기본 반복 블럭을 사용했다.<br />
개발자 문서를 찾아봐야하나…</p>

<p>단축어의 장점은 제공되는 기본 기능을 자유롭게 확장할 수 있다는 것이며
단축어의 단점은 제공되는 기본 기능만 자유롭게 확장할 수 있다는 것</p>

<p>api 연동까지는 어떻게 편하게 써도 js 엮이는 순간 골치아파지는데<br />
나중에 포스트로 다뤄볼 기회가 있을 것이다.</p>

<blockquote>
  <h4 id="공유">공유</h4>
  <hr />
</blockquote>

<p>사파리에서 링크 실행</p>

<p><a href="https://www.icloud.com/shortcuts/1846ec094ab34bf79d689d4dcbd32a36">제비 뽑기 - iCloud Link</a></p>]]></content><author><name>movingwoo</name></author><category term="Development/Shortcuts/" /><category term="단축어" /><category term="제비 뽑기" /><summary type="html"><![CDATA[단축어 제비 뽑기 프로그램 개발]]></summary></entry><entry><title type="html">21237번 Clockwise Fence</title><link href="https://movingwoo.com/boj/java/2025/06/10/21237.html" rel="alternate" type="text/html" title="21237번 Clockwise Fence" /><published>2025-06-10T01:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/10/21237</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/10/21237.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-10-21237/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/21237">21237번 Clockwise Fence - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>울타리를 설치했는데 울타리가 시계 방향으로 설치되었는지 반시계 방향으로 설치되었는지 구하시오.<br />
시작점과 도착점은 같으며 울타리가 하나의 영역을 감싸고 있는게 보장된다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>신발끈 공식을 써서 양수면 반시계 방향, 음수면 시계 방향이다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>NSWE 형식으로 방향이 들어오니 Map으로 방향 별 더할 좌표를 구성해두고<br />
방향 데이터를 받아서 순회하며 신발끈 공식으로 면적을 구한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
<span class="c1">// 방향</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'N'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'E'</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'S'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'W'</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">dy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'N'</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'E'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'S'</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'W'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

<span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">char</span><span class="o">[]</span> <span class="n">fences</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
	
	<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fences</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">fences</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">fences</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>

		<span class="c1">// 신발끈 공식</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">ny</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">nx</span><span class="o">;</span>

		<span class="c1">// 이전 좌표 갱신</span>
		<span class="n">x</span> <span class="o">=</span> <span class="n">nx</span><span class="o">;</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">ny</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="c1">// 음수면 시계 방향 아니면 반시계 방향</span>
	<span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"CW\n"</span><span class="o">);</span>
	<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"CCW\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-10-21237/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>파이썬 하다가 자바 보니까 코드가 못났다.<br />
점점 파이썬에 스며드는 중이다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-10-21237.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="21237" /><category term="Clockwise Fence" /><category term="수학" /><summary type="html"><![CDATA[백준 21237번 Clockwise Fence JAVA 문제풀이]]></summary></entry></feed>