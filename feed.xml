<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://movingwoo.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://movingwoo.com/" rel="alternate" type="text/html" hreflang="ko-KR" /><updated>2025-06-24T06:26:58+00:00</updated><id>https://movingwoo.com/feed.xml</id><title type="html">뭐라도 하겠지</title><subtitle>개발, C++, JAVA, Python, Shortcut, 백준</subtitle><entry><title type="html">16172번 나는 친구가 적다 (Large)</title><link href="https://movingwoo.com/boj/java/2025/06/24/16172.html" rel="alternate" type="text/html" title="16172번 나는 친구가 적다 (Large)" /><published>2025-06-24T06:00:00+00:00</published><updated>2025-06-24T06:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/24/16172</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/24/16172.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-24-16172/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/16172">16172번 나는 친구가 적다 (Large) - 백준</a></p>

<p>요것도 5년전 시간초과다.<br />
대체로 경향이 단순 시뮬레이션으로 소스 넣어보고 시간초과뜨면 도망갔던 것으로 보인다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">a</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"[0-9]"</span><span class="o">,</span><span class="s">""</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">b</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">b</span><span class="o">)?</span><span class="s">"1"</span><span class="o">:</span><span class="s">"0"</span><span class="o">);</span>
</code></pre></div></div>

<p>입력받은 S의 숫자를 replaceAll로 제거하고 contain을 사용했다.<br />
Small 문제는 이걸로 통과했나본데 Large의 경우 S와 K가 20만개까지 있을 수 있어 택도 없다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>문제 자체가 한글로 되어있고 쉬워보여서 코드 제출이 많은 경우<br />
통과해선 안되는 코드를 저격하기위해 <span style="color: orange;"><strong>수많은 반례</strong></span>가 존재한다.</p>

<p>이 문제도 그런 류에 속한다.<br />
처음에 특별한 알고리즘을 쓸 일 있나 싶어서 포인터를 2개 두고 S와 K를 시간복잡도 O(N) 으로 탐색하려했는데<br />
자꾸 무슨 반례에 걸렸는지 틀렸습니다를 뿜어내기 시작…</p>

<p>화가났지만 <span style="color: orange;"><strong>KMP 알고리즘</strong></span>을 써서 통과했다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// KMP 배열</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">kmp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">K</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>

<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> 

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">kmp</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	
	<span class="k">if</span> <span class="o">(</span><span class="no">K</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="no">K</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx</span><span class="o">))</span> <span class="o">{</span>
		<span class="n">kmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">idx</span><span class="o">;</span> 
	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// aabc abc 같은 패턴</span>
		<span class="n">idx</span> <span class="o">=</span> <span class="n">kmp</span><span class="o">[</span><span class="n">idx</span> <span class="o">-</span><span class="mi">1</span><span class="o">];</span> 
		<span class="n">i</span><span class="o">--;</span>
	<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
		<span class="n">kmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">S</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
		
		<span class="k">while</span><span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="no">S</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="no">K</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
			<span class="n">j</span> <span class="o">=</span> <span class="n">kmp</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
		<span class="o">}</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="no">K</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
			<span class="n">j</span><span class="o">++;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="no">K</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
				<span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-24-16172/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>진짜 무슨 예제가 자꾸 틀렸던 걸까?<br />
이것저것 만들어서 넣어봤는데 알 수가 없다.<br />
<span style="color: red;"><strong>브론즈 문제 무서워…</strong></span></p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-24-16172.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="16172" /><category term="나는 친구가 적다 (Large)" /><category term="KMP" /><summary type="html"><![CDATA[백준 16172번 나는 친구가 적다 (Large) JAVA 문제풀이]]></summary></entry><entry><title type="html">12833번 XORXORXOR</title><link href="https://movingwoo.com/boj/java/2025/06/24/12833.html" rel="alternate" type="text/html" title="12833번 XORXORXOR" /><published>2025-06-24T04:00:00+00:00</published><updated>2025-06-24T04:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/24/12833</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/24/12833.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-24-12833/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/12833">12833번 XORXORXOR - 백준</a></p>

<p>당분간 틀린 브론즈 문제로 힐링해야지.<br />
5년 전 시간초과다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
	<span class="nc">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));)</span> <span class="o">{</span>
	<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
	<span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">c</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="n">a</span><span class="o">^=</span><span class="n">b</span><span class="o">;</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
</code></pre></div></div>

<p>XOR 연산을 실제로 C번 진행해서 시간초과가 난다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>C가 최대 10^9인데 제한시간이 0.2초라서 시뮬레이션하면 터진다.</p>

<p>XOR을 2번하면 원래대로 돌아오므로 <span style="color: orange;"><strong>C가 짝수면 A, 홀수면 A ^ B</strong></span> 를 출력한다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>버퍼드리더로 충분할 것 같긴 한데 빠른 입력 만들어둔걸 또 가져와서 쓰자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>

	<span class="nc">InputReader</span> <span class="n">ir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InputReader</span><span class="o">();</span>
	
	<span class="kt">int</span> <span class="no">A</span> <span class="o">=</span> <span class="n">ir</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
	<span class="kt">int</span> <span class="no">B</span> <span class="o">=</span> <span class="n">ir</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
	<span class="kt">int</span> <span class="no">C</span> <span class="o">=</span> <span class="n">ir</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
	
	<span class="k">if</span> <span class="o">(</span><span class="no">C</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">A</span><span class="o">);</span>
	<span class="k">else</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">A</span> <span class="o">^</span> <span class="no">B</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 빠른 입출력 구현</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">InputReader</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">20</span><span class="o">];</span>
	
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">buflen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

	<span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">boolean</span> <span class="n">negative</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">c</span> <span class="o">=</span> <span class="n">read</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;</span> <span class="sc">' '</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">)</span> <span class="o">{</span> 
			<span class="n">negative</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="n">c</span> <span class="o">=</span> <span class="n">read</span><span class="o">();</span> 
		<span class="o">}</span>
		
		<span class="k">while</span><span class="o">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">);</span>
			<span class="n">c</span><span class="o">=</span> <span class="n">read</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">negative</span> <span class="o">?</span> <span class="o">-</span><span class="n">x</span> <span class="o">:</span> <span class="n">x</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">ptr</span> <span class="o">&gt;=</span> <span class="n">buflen</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">buflen</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
			<span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">buflen</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">buf</span><span class="o">[</span><span class="n">ptr</span><span class="o">++]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-24-12833/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>뭔가 불만족스러운 속도는 출력에 신경을 쓰지 않아서인가…<br />
빠른 출력 코드도 찾아와서 다음에 써먹어야겠다.<br />
분명히 예전에 해둔게 있을건데</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-24-12833.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="12833" /><category term="XORXORXOR" /><category term="애드훅" /><summary type="html"><![CDATA[백준 12833번 XORXORXOR JAVA 문제풀이]]></summary></entry><entry><title type="html">16221번 모독</title><link href="https://movingwoo.com/boj/c++/2025/06/24/16221.html" rel="alternate" type="text/html" title="16221번 모독" /><published>2025-06-24T02:00:00+00:00</published><updated>2025-06-24T02:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/24/16221</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/24/16221.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-24-16221/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/16221">16221번 모독 - 백준</a></p>

<p>예전에 하스스톤 해 본 사람은 다 아는 모독 각.<br />
매 케이스 마다 모독으로 죽는 하수인이 몇 개인지 출력하는 문제다.<br />
모독이 무엇인가?<br />
카드를 확인해보도록 하자.</p>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-24-16221/img02.webp" alt="img02" width="300" style="height: auto;" /></p>

<p>5년 전 답안을 볼까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">q</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">q</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
	<span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="k">if</span><span class="o">(</span><span class="n">t</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span> <span class="n">arr</span><span class="o">[</span><span class="n">k</span><span class="o">]++;</span>
	<span class="k">else</span> <span class="n">arr</span><span class="o">[</span><span class="n">k</span><span class="o">]--;</span>
	<span class="kt">long</span> <span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">q</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="n">c</span><span class="o">+=</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
		<span class="k">else</span> <span class="k">break</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">c</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>심플한 접근, 심플한 시간초과</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><span style="color: orange;"><strong>Q와 K가 100만</strong></span>이다.<br />
시간초과를 어떻게 피할 수 있을 것인가?</p>

<p>문제 분류가 세그먼트 트리라 아무 생각없이 구현했다가 시간초과에 걸렸다.<br />
자바가 문제인가 해서 빠른 입출력을 직접 구현해도 시간초과 나는 걸 보고 로직 자체에 문제가 있다는 걸 알았다.</p>

<p>C++로 시간초과가 나지 않아야 Java로 건드릴 수나 있겠다 싶어서 언어 전환<br />
극단적인 케이스에서 시뮬레이션을 돌리면 터질 수 밖에 없는 구조인데 어떻게 시간을 단축 시킬 것인가?</p>

<p>결국 <span style="color: orange;"><strong>펜윅트리 + 이진탐색</strong></span>으로 해결 봤다.</p>

<blockquote>
  <h4 id="c-구현">C++ 구현</h4>
  <hr />
</blockquote>

<h5 id="1-초기화">1. 초기화</h5>

<p>우선 C++로 구현한다.</p>

<p>update 함수는 펜윅트리에 값을 추가하거나 제거한다.<br />
처음에 필드에 하수인이 없으므로 update 함수를 통해 트리를 초기화한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 하수인</span>
<span class="kt">int</span> <span class="n">minions_bit</span><span class="p">[</span><span class="mi">1000001</span><span class="p">];</span>
<span class="c1">// 전장에 없는 체력</span>
<span class="kt">int</span> <span class="n">absent_bit</span><span class="p">[</span><span class="mi">1000001</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">check</span><span class="p">[</span><span class="mi">1000001</span><span class="p">];</span>

<span class="c1">// BIT에 값 추가, 제거</span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">bit</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000001</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">bit</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

    <span class="c1">// 초기화</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000001</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">update</span><span class="p">(</span><span class="n">absent_bit</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="2-하수인-상태-반영-및-구간합-계산">2. 하수인 상태 반영 및 구간합 계산</h5>

<p>T에 따라서 하수인을 추가하거나 제거한다.<br />
absent 트리는 check 배열을 통해 해당 하수인 존재 여부를 확인 후 업데이트 한다.</p>

<p>하수인 배치가 끝나면 모독각을 봐야한다.<br />
이진탐색으로 전장에 없는 가장 작은 체력을 찾는다.<br />
모독으로는 그 체력 아래까지 하수인이 전부 죽기 때문에 그 아래 체력까지의 하수인 수를 구해서 출력한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1~i까지 합</span>
<span class="kt">int</span> <span class="nf">bit_sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">bit</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">result</span> <span class="o">+=</span> <span class="n">bit</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">i</span> <span class="o">-=</span> <span class="n">i</span> <span class="o">&amp;</span> <span class="o">-</span><span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ... 중략 ...</span>
        
<span class="c1">// 1이면 하수인 추가 2면 제거</span>
<span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">check</span><span class="p">[</span><span class="n">K</span><span class="p">]</span><span class="o">++</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// 하수인 처음 추가될때만 제거</span>
		<span class="n">update</span><span class="p">(</span><span class="n">absent_bit</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">update</span><span class="p">(</span><span class="n">minions_bit</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="n">update</span><span class="p">(</span><span class="n">minions_bit</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>

	<span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">check</span><span class="p">[</span><span class="n">K</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// 하수인 마지막 제거될때만 추가</span>
		<span class="n">update</span><span class="p">(</span><span class="n">absent_bit</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
	
<span class="p">}</span>

<span class="c1">// 이진 탐색</span>
<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">bitMask</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="n">bitMask</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">bitMask</span><span class="p">;</span>
	
	<span class="c1">// 없는 체력이 있으면</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">1000001</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">absent_bit</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">sum</span> <span class="o">+=</span> <span class="n">absent_bit</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
		<span class="n">idx</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">bitMask</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 실제 체력 보정</span>
<span class="o">++</span><span class="n">idx</span><span class="p">;</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bit_sum</span><span class="p">(</span><span class="n">minions_bit</span><span class="p">,</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <h4 id="c-채점">C++ 채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-24-16221/img03.webp" alt="img03" /></p>

<p>아 뭐지 왜이렇게 문제 빡세지<br />
이제 이대로 자바로 포팅해본다.</p>

<blockquote>
  <h4 id="java-구현">Java 구현</h4>
  <hr />
</blockquote>

<p>특별한 유틸을 쓴게 없기 때문에 간단하게 포팅할 수 있다.<br />
빠른 입출력은 구현해둔게 있기 때문에 그대로 가져가서 쓴다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 빠른 입출력 구현</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">InputReader</span> <span class="o">{</span>
	
	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">20</span><span class="o">];</span>
	
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">buflen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

	<span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="kt">boolean</span> <span class="n">negative</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">c</span> <span class="o">=</span> <span class="n">read</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">&gt;</span> <span class="sc">' '</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">)</span> <span class="o">{</span> 
			<span class="n">negative</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="n">c</span> <span class="o">=</span> <span class="n">read</span><span class="o">();</span> 
		<span class="o">}</span>
		
		<span class="k">while</span><span class="o">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">);</span>
			<span class="n">c</span><span class="o">=</span> <span class="n">read</span><span class="o">();</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">negative</span> <span class="o">?</span> <span class="o">-</span><span class="n">x</span> <span class="o">:</span> <span class="n">x</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">ptr</span> <span class="o">&gt;=</span> <span class="n">buflen</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">buflen</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">);</span>
			<span class="n">ptr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">buflen</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">buf</span><span class="o">[</span><span class="n">ptr</span><span class="o">++]</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="java-채점">Java 채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-24-16221/img04.webp" alt="img04" /></p>

<p>드디어 성공</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>바빠서 깨작깨작 만져서 그런가 집중도 제대로 못해서 그런지 상당히 까다로웠다<br />
그냥 내가 못해서 시간초과난건데 이건 Java가 구려서 그래 하면서 애꿎은 Java 탓만 하고 있었네…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/C%2B%2B/2025-06-24-16221.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="16221" /><category term="모독" /><category term="펜윅트리" /><category term="이진탐색" /><summary type="html"><![CDATA[백준 16221번 모독 C++ 문제풀이]]></summary></entry><entry><title type="html">코드 시뮬레이터</title><link href="https://movingwoo.com/development/python/2025/06/19/Code-Simulator.html" rel="alternate" type="text/html" title="코드 시뮬레이터" /><published>2025-06-19T07:00:00+00:00</published><updated>2025-06-19T07:00:00+00:00</updated><id>https://movingwoo.com/development/python/2025/06/19/Code%20Simulator</id><content type="html" xml:base="https://movingwoo.com/development/python/2025/06/19/Code-Simulator.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p>Jekyll 블로그는 정적이라 뭔가 구현하는데 한계가 좀 많다.<br />
마개조하고싶은데 뭘 할 수 있을까 고민하다가 떠오른 코드 시뮬레이터.</p>

<p>원래 구상으론 내가 할 줄 아는 언어들을 전부 집어넣어 기능을 구현하고 싶었는데<br />
현실적으로 상당한 제약이 있다.</p>

<p>JS는 손 댈 것도 없다.<br />
대충 떠올려봐도 <span style="color: orange;"><strong>eval</strong></span> 박아넣으면 바로 가능하다.<br />
보안 상 이슈가 있겠지만…</p>

<p>C++을 실행시키려면 코드를 컴파일해서 결과를 제공해야하는데 이건 <span style="color: orange;"><strong>정적 환경에서는 불가능</strong></span>하다.<br />
Java도 브라우저에 <span style="color: orange;"><strong>JVM이 없으므로 불가능</strong></span>하다.<br />
Java Applet이 있었지만 보안 이슈로 퇴출되었고 JS로 돌려서 실행시키는 법도 있지만 무슨 의미가 있을까…</p>

<p>Python은 <span style="color: orange;"><strong>Pyodide</strong></span>를 이용하면 브라우저에서 실행이 가능하다고 한다.<br />
그렇다면 Python 코드 시뮬레이터를 만들어보자!</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><a href="https://pyodide.org/en/stable/">Pyodide</a></p>

<p><img src="/assets/images/posts/Development/Python/2025-06-19-Code Simulator/img01.webp" alt="img01" /></p>

<p>Pyodide 소개 페이지다.<br />
브라우저에서 Python을 사용할 수 있다.<br />
CPython을 Wasm으로 포팅했다고 한다.</p>

<p>적용법은 아주 간단하다.</p>

<p><img src="/assets/images/posts/Development/Python/2025-06-19-Code Simulator/img02.webp" alt="img02" /></p>

<p>CDN 경로에 pyodide.js를 붙이면 정상적으로 로드된다.<br />
js에 스크립트 태그와 함께 집어넣으면 된다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">https://cdn.jsdelivr.net/pyodide/v0.27.7/full/pyodide.js</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-html-작성">1. html 작성</h5>

<p>코드를 입력할 부분과 실행버튼, 결과를 표시할 부분을 작성한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;title&gt;</span>Code Simulator<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/pyodide/v0.27.7/full/pyodide.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nt">body</span> <span class="p">{</span>
      <span class="nl">max-width</span><span class="p">:</span> <span class="m">1200px</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">h1</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="m">#000000</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">textarea</span> <span class="p">{</span>
      <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
      <span class="nl">font-size</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
      <span class="nl">padding</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
      <span class="nl">background</span><span class="p">:</span> <span class="m">#ffffff</span><span class="p">;</span>
      <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#000000</span><span class="p">;</span>
      <span class="nl">resize</span><span class="p">:</span> <span class="n">vertical</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">button</span> <span class="p">{</span>
      <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nt">pre</span> <span class="p">{</span>
      <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
      <span class="nl">font-size</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
      <span class="nl">padding</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
      <span class="nl">background</span><span class="p">:</span> <span class="m">#ffffff</span><span class="p">;</span>
      <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#000000</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Python Code Simulator<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"code"</span> <span class="na">placeholder=</span><span class="s">"Python 코드 입력"</span><span class="nt">&gt;</span>print("Hello World!!")<span class="nt">&lt;/textarea&gt;</span>
  <span class="nt">&lt;br/&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"run()"</span><span class="nt">&gt;</span>실행<span class="nt">&lt;/button&gt;</span>
  <span class="c">&lt;!-- 결과가 깨져서 pre 태그로 처리 --&gt;</span>
  <span class="nt">&lt;pre</span> <span class="na">id=</span><span class="s">"output"</span><span class="nt">&gt;</span>실행 결과 표시 창<span class="nt">&lt;/pre&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="c1">// 스크립트 작성</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h5 id="2-스크립트-작성">2. 스크립트 작성</h5>

<p><img src="/assets/images/posts/Development/Python/2025-06-19-Code Simulator/img03.webp" alt="img03" /></p>

<p>사용 가이드 페이지를 확인해보면 초기화 방법이 나와있다.<br />
async 함수를 사용하여 비동기로 초기화한다.<br />
페이지 로드 시 1회 초기화 하도록 설정하고, 코드를 전달해서 결과를 받아 뿌려준다.</p>

<p>그냥 사용 시 개발자도구 콘솔에 결과를 뿌려주는데<br />
print를 재정의해서 변수로 저장해 내 마음대로 컨트롤 할 수 있게 한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Pyodide 인스턴스를 전역 변수로 저장</span>
<span class="kd">let</span> <span class="nx">pyodide</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="c1">// 광클시 중복실행 방지용</span>
<span class="kd">let</span> <span class="nx">isRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="c1">// 초기화 함수</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nf">loadPyodide</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// 페이지 로드 시 Pyodide 초기화</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">pyodide</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">load</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// 코드 실행 함수</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">isRunning</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

  <span class="nx">isRunning</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  
  <span class="kd">const</span> <span class="nx">code_value</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#code</span><span class="dl">"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">output_area</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#output</span><span class="dl">"</span><span class="p">);</span>
  
  <span class="c1">// 로드되는데 시간이 걸릴 수 있어서 그동안 보여줄 메시지</span>
  <span class="nx">output_area</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">실행 중...</span><span class="dl">"</span><span class="p">;</span>

  <span class="k">try</span> <span class="p">{</span>

    <span class="c1">// 초기화 되지 않았다면 기다리기</span>
    <span class="k">while </span><span class="p">(</span><span class="o">!</span><span class="nx">pyodide</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">100</span><span class="p">));</span>
    <span class="p">}</span>
    
    <span class="kd">let</span> <span class="nx">stdout</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
    
    <span class="c1">// 그냥 사용하면 개발자도구 콘솔에 출력됨</span>
    <span class="c1">// print를 재정의하여 stdout 변수로 저장</span>
    <span class="nx">pyodide</span><span class="p">.</span><span class="nx">globals</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">print</span><span class="dl">"</span><span class="p">,</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">stdout</span> <span class="o">+=</span> <span class="nx">args</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">});</span>
    
    <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">pyodide</span><span class="p">.</span><span class="nf">runPythonAsync</span><span class="p">(</span><span class="nx">code_value</span><span class="p">);</span>
    
    <span class="k">if </span><span class="p">(</span><span class="nx">stdout</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">output_area</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">stdout</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// stdout이 잘못되었을 경우 Python에서 undefined를 반환했는지 확인 필요</span>
      <span class="nx">output_area</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">result</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">undefined</span><span class="dl">"</span> <span class="p">:</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">output_area</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">finally</span><span class="p">{</span>
    <span class="nx">isRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="3-입력-받기">3. 입력 받기</h5>

<p>코드 입력 시 결과 출력은 문제 없는데 input을 직접 받지 못해 오류가 난다.<br />
print()와 마찬가지로 input()을 재정의해서 사용자 입력을 받을 수 있도록 한다.</p>

<p>실제 대화형 처럼 하려면 너무 복잡해진다.<br />
그냥 알고리즘 문제 풀 때처럼 입력 한 번 받을 수 있게만 한다.<br />
지속적으로 입력 받는건 다음에 시간나면 해보기로 하자.</p>

<p>구현은 최대한 간단하게<br />
input 입력란을 별도로 두고 해당 textarea에 작성된 값을 input으로 삼아 코드를 실행시킨다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"input"</span> <span class="na">placeholder=</span><span class="s">"사용자 입력"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</code></pre></div></div>

<p>여러 줄을 전송할 경우 전체를 한 번에 받아들여서 오류가 난다.<br />
한 줄 씩 처리할 수 있도록 줄단위로 나눠줄 필요가 있다.</p>

<p>입력이 input() 요구보다 모자란 경우에 EOF Exception을 던지는 것으로 예외처리한다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 여러 줄 전송하기 위해 라인 별 저장</span>
<span class="kd">const</span> <span class="nx">input_values</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#input</span><span class="dl">"</span><span class="p">).</span><span class="nx">value</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sr">/</span><span class="se">\r?\n</span><span class="sr">/</span><span class="p">);</span>

<span class="c1">// ... 중략 ...</span>

<span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="c1">// input을 재정의하여 사용자 입력 값 전달</span>
<span class="nx">pyodide</span><span class="p">.</span><span class="nx">globals</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">input</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">input_values</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">input_values</span><span class="p">[</span><span class="nx">index</span><span class="o">++</span><span class="p">];</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">EOF Exception</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/Development/Python/2025-06-19-Code Simulator/img04.webp" alt="img04" /></p>

<p><span style="color: orange;"><strong>Hello World!!</strong></span></p>

<p>사용자 입력 테스트도 해봐야겠다.<br />
가장 최근에 파이썬으로 푼 문제인 백준 3655번으로 테스트 해보자.<br />
위쪽에 내 코드를 넣고, 아래쪽 사용자 입력에 예제를 집어넣는다.</p>

<p><img src="/assets/images/posts/Development/Python/2025-06-19-Code Simulator/img05.webp" alt="img05" /></p>

<p>스무스하게 작동한다.</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>파이썬이 웹에서도 동작하는 세상이라니<br />
누가 감히 알았겠는가<br />
<span style="color: red;"><strong>이것은 파이썬이 위대한 것인가 JS가 위대한 것인가?</strong></span></p>

<p>찾아보니 <span style="color: orange;"><strong>PyScript</strong></span>를 사용하면 아예 <span style="color: orange;"><strong>py-script</strong></span> 태그를 통해 파이썬 문법을 그대로 쓰는 방법도 있다고 한다.<br />
내부에서 Pyodide를 사용하며 동작하는 일종의 프레임워크로 볼 수 있다고 한다.<br />
그럼 이제 js를 몰라도 파이썬으로 웹 앱을 만들 수 있다는 소리인가?<br />
기술의 발전은 정말이지 두렵다…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/Development/Python/2025-06-19-Code%20Simulator.html">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="Development/Python/" /><category term="PYTHON" /><category term="코드 시뮬레이터" /><category term="Pyodide" /><summary type="html"><![CDATA[PYTHON 코드 시뮬레이터 프로그램 개발]]></summary></entry><entry><title type="html">17456번 필살! 60단 컴보</title><link href="https://movingwoo.com/boj/c++/2025/06/19/17456.html" rel="alternate" type="text/html" title="17456번 필살! 60단 컴보" /><published>2025-06-19T02:00:00+00:00</published><updated>2025-06-19T02:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/19/17456</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/19/17456.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀!</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/17456">17456번 필살! 60단 컴보 - 백준</a></p>

<p>5년 전이긴 한데 이 문제는 아직도 기억이 생생하다?<br />
당시 이런 고난이도 문제는 익숙하지 않았는데 풀어보겠다고 난리를 피웠다?<br />
제출 현황을 보면 C만 통과해서 Java로는 못푸는 문제인가! 하고 생각 했는데<br />
지금보니 아직도 Java는 한개도 안보인다?</p>

<p>우선 C++로 풀어보고 Java로 포팅해서 되는지 확인한다?</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>2진수로 바꿔서 세면 그만이긴 한데, 정수 a, b, c의 범위가 <span style="color: orange;"><strong>2^60</strong></span> 이다.<br />
숫자가 너무 커서 그냥 세면 시간초과가 날 수 밖에 없다.<br />
따라서 적당히 전처리를 해야한다.</p>

<p>순서대로 보자.<br />
<span style="color: orange;"><strong>1. 테스트케이스 돌리기 전에 최대 60비트까지 가능한 모든 패턴을 계산하는 전처리를 진행한다.</strong></span><br />
<span style="color: orange;"><strong>2. c의 점수를 계산한다.</strong></span><br />
<span style="color: orange;"><strong>3. 0 ~ b 구간 점수와 0 ~ a - 1 구간 점수의 차를 계산한다.</strong></span></p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-전처리">1. 전처리</h5>

<p>0부터 60비트 수까지 가능한 모든 패턴을 계산한다.<br />
테스트케이스도 최대 30만개라서 미리 해놓지 않으면 안된다.</p>

<p>dp[i][j] 는 0 ≤ n &lt; 2^i 중에서 f(n) ≥ j인 개수이며 f(n)은 n의 이진 표현에서 연속된 1 구간들의 길이 제곱 합(실제 점수)이다.<br />
점화식은 <span style="color: orange;"><strong>dp[i][j] = dp[i - 1][j] + Σ(k = 1 to i) dp[i - k - 1][max(0, j - k^2)]</strong></span></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 전처리 시작, 가능한 모든 패턴을 미리 계산</span>
<span class="n">ull</span> <span class="n">dp</span><span class="p">[</span><span class="n">MAX_BITS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">MAX_SCORE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
<span class="c1">// dp[i][j] = 0 ≤ n &lt; 2^i 중에서 f(n) ≥ j인 개수, f(n)은 n의 이진 표현에서 연속된 1 구간들의 길이 제곱 합</span>
<span class="c1">// 점화식: dp[i][j] = dp[i - 1][j] + Σ(k = 1 to i) dp[i - k - 1][max(0, j - k^2)]</span>

<span class="c1">// 점수 0은 0비트에서만 가능하므로 1개</span>
<span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">MAX_SCORE</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 0비트에서는 0보다 큰 점수가 존재하지 않음</span>
  <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// i비트 수까지 확장</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">MAX_BITS</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">MAX_SCORE</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
      
    <span class="c1">// 1. 최상위 비트를 0으로 두는 경우 (0xxx 형태)</span>
    <span class="c1">// 연속 1구간이 아니므로 i-1 비트로 j 이상 만드는 경우의 수</span>
    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>

    <span class="c1">// 2. 최상위 비트에서 연속 k개의 1을 쓰는 경우 (110xxx 형태)</span>
    <span class="c1">// 그 다음 비트가 있다면 0으로 강제, 길이 k의 연속 1 구간이 생성되고, 그 다음부터는 새로운 구간</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// k개의 1 다음에 남는 비트 수</span>
      <span class="kt">int</span> <span class="n">zero_bit</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>          
      <span class="k">if</span> <span class="p">(</span><span class="n">zero_bit</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// k == i일 때 모든 비트가 1</span>
        <span class="n">zero_bit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 앞 연속구간 점수 k^2를 제외하고 남은 필요 점수</span>
      <span class="kt">int</span> <span class="n">need_score</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">k</span> <span class="o">*</span> <span class="n">k</span><span class="p">;</span>                
      <span class="k">if</span> <span class="p">(</span><span class="n">need_score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">need_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 남은 비트들로 필요 점수 이상 만들 수 있는 경우의 수</span>
      <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">zero_bit</span><span class="p">][</span><span class="n">need_score</span><span class="p">];</span>         
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// 전처리 종료</span>
</code></pre></div></div>

<h5 id="2-c의-점수-구하기">2. c의 점수 구하기</h5>

<p>1로 끝나는 경우 남은 점수 추가에 유의한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">c_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// c의 점수 계산 (연속된 1 구간 길이의 제곱 함)</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_BITS</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 1이면 길이증가, 0이면 점수추가</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="p">{</span>
    <span class="o">++</span><span class="n">len</span><span class="p">;</span>  
  <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">c_score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
    <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 1이 남은 경우 점수 추가</span>
<span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">c_score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="3-구간-점수-차-계산">3. 구간 점수 차 계산</h5>

<p>0부터 특정 구간까지 c의 점수보다 높은 점수를 받은 경우의 수를 찾는 함수를 만든다.<br />
그 다음 <span style="color: orange;"><strong>0부터 b 구간까지 찾은 수에서 0부터 a-1 구간까지 찾은 수를 빼면</strong></span> 찾는 답이 나온다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ull</span> <span class="nf">find_score</span><span class="p">(</span><span class="n">ull</span> <span class="n">dp</span><span class="p">[</span><span class="n">MAX_BITS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">MAX_SCORE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">ull</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c_score</span><span class="p">)</span> <span class="p">{</span>

  <span class="c1">// 60^2를 넘을 경우 예외처리</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">c_score</span> <span class="o">&gt;</span> <span class="n">MAX_SCORE</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">ull</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 최상위 비트부터</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">MAX_BITS</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">bit</span> <span class="o">=</span> <span class="p">(</span><span class="n">target</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">;</span>

    <span class="c1">// 1이면 0으로 바꿔서 더 작은 수 계산</span>
    <span class="c1">// 0이면 점수추가</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">bit</span><span class="p">)</span> <span class="p">{</span>

      <span class="kt">int</span> <span class="n">need_score</span> <span class="o">=</span> <span class="n">c_score</span> <span class="o">-</span> <span class="p">(</span><span class="n">score</span> <span class="o">+</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">need_score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">need_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// i비트로 필요 점수 이상 만들 수 있는 경우의 수</span>
      <span class="n">count</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">need_score</span><span class="p">];</span>
      <span class="o">++</span><span class="n">len</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
          <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// 1이 남은 경우 점수 추가</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">score</span> <span class="o">+=</span> <span class="n">len</span> <span class="o">*</span> <span class="n">len</span><span class="p">;</span>
  
  <span class="c1">// 전달받은 a - 1과 b도 포함</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="n">c_score</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">++</span><span class="n">count</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ... 중략 ...</span>

<span class="c1">// 0 ~ b 구간 점수와 0 ~ a - 1 구간 점수의 차</span>
<span class="n">ull</span> <span class="n">sector_b</span> <span class="o">=</span> <span class="n">find_score</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c_score</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="c1">// a가 0이면 0 처리</span>
<span class="n">ull</span> <span class="n">sector_a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">find_score</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span> <span class="n">a</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c_score</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">sector_b</span> <span class="o">-</span> <span class="n">sector_a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <h4 id="1차-채점c">1차 채점(C++)</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img02.webp" alt="img02" /></p>

<p>C++로는 통과했다.<br />
5년전 나의 원혼을 달래기 위해 이 코드를 그대로 Java로 포팅해서 2차 시도를 해보자.<br />
PyPy로 통과한 이력은 보이는데 Java로는 불가능한 것인가??</p>

<blockquote>
  <h4 id="2차-채점java">2차 채점(Java)</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/C++/2025-06-19-17456/img03.webp" alt="img03" /></p>

<p><span style="color: red;"><strong>이게되네</strong></span><br />
흑흑 이거 Java로도 풀 수 있는 문제였어<br />
그냥 옛날의 내가 최적화하지 못한 것 뿐이야</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>다이나믹 프로그래밍 딱지 붙은 문제는 당분간 피하는게 좋겠다.<br />
뇌가 녹아내릴 것 같다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/C%2B%2B/2025-06-19-17456.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="17456" /><category term="필살! 60단 컴보" /><category term="DP" /><summary type="html"><![CDATA[백준 17456번 필살! 60단 컴보 C++ 문제풀이]]></summary></entry><entry><title type="html">11568번 민균이의 계략</title><link href="https://movingwoo.com/boj/java/2025/06/18/11568.html" rel="alternate" type="text/html" title="11568번 민균이의 계략" /><published>2025-06-18T01:00:00+00:00</published><updated>2025-06-18T01:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/18/11568</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/18/11568.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-11568/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/11568">11568번 민균이의 계략 - 백준</a></p>

<p>5년전 틀렸습니다를 받은 문제.<br />
당시 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="kt">int</span> <span class="n">cm</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">bf</span><span class="o">=</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;</span><span class="n">bf</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">cnt</span><span class="o">++;</span>
			<span class="n">bf</span><span class="o">=</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">&gt;</span><span class="n">cm</span><span class="o">)</span> <span class="n">cm</span><span class="o">=</span><span class="n">cnt</span><span class="o">;</span>
<span class="o">}</span>
<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cm</span><span class="o">+</span><span class="s">""</span><span class="o">);</span>
</code></pre></div></div>

<p>그리디로 푼 것 같다.<br />
이걸로는 찾지 못한 예외 케이스가 있었겠지.<br />
문제 분류가 <span style="color: orange;"><strong>DP</strong></span>니 그렇게 접근해보자.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>점화식을 세운다.<br />
수열 A[0] 부터 A[N - 1] 이 있을 때 dp[i] 는 i를 마지막으로 하는 부분순열의 길이다.</p>

<p>A[i] 앞에 있는 원소들 중 <span style="color: orange;"><strong>A[j] &lt; A[i]</strong></span> 인 경우만 고려한다.<br />
그 중 가장 긴 부분수열에 A[i]를 붙인다.</p>

<p>기본적으로 자기 자신을 포함하니 <span style="color: orange;"><strong>dp[i] = 1</strong></span> 에서 시작<br />
<span style="color: orange;"><strong>dp[i] = arr[j] &lt; arr[i] ? max(dp[i], dp[j] + 1) : dp[i]</strong></span></p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="no">N</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
<span class="o">}</span>

<span class="c1">// DP</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">?</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">:</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="c1">// 가장 긴 부분수열</span>
	<span class="n">result</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-11568/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>시간복잡도가 O(N^2) 인데 N이 작아서 상관없다.<br />
1회 틀린 것은 삼항연산자 마지막에 1을 박아둬서 초기화되어서 발생한 문제.<br />
항상 눈을 부릅뜨고 살펴보자.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-18-11568.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="11568" /><category term="민균이의 계략" /><category term="DP" /><summary type="html"><![CDATA[백준 11568번 민균이의 계략 JAVA 문제풀이]]></summary></entry><entry><title type="html">18870번 좌표 압축</title><link href="https://movingwoo.com/boj/java/2025/06/18/18870.html" rel="alternate" type="text/html" title="18870번 좌표 압축" /><published>2025-06-18T00:00:00+00:00</published><updated>2025-06-18T00:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/18/18870</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/18/18870.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-18870/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/18870">18870번 좌표 압축 - 백준</a></p>

<p>4년 전의 기록이다.<br />
화려한 시간초과의 향연!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
			
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="k">try</span><span class="o">{</span>
				<span class="nc">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
				<span class="nc">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

				<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span><span class="s">" "</span><span class="o">);</span>

				<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
				<span class="kt">int</span><span class="o">[]</span> <span class="n">result</span><span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

				<span class="kt">int</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
				<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">()){</span>
					<span class="n">arr</span><span class="o">[</span><span class="n">idx</span><span class="o">++]=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="o">}</span>

				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
					<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
						<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">!=</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]&gt;</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
							<span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
						<span class="o">}</span>
					<span class="o">}</span>
				<span class="o">}</span>

				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">result</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">" "</span><span class="o">);</span>
				<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>

			<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>전체 순회하며 결과 배열에 숫자를 하나씩 더해간다.<br />
좀 더 시간을 줄일 수 있게 접근해야한다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>중복되는 요소가 있으니 <span style="color: orange;"><strong>Set을 활용해 중복을 거르고 정렬</strong></span>한다.<br />
TreeSet을 쓰면 되겠다.<br />
그 후 <span style="color: orange;"><strong>순서 인덱스를 매핑해서 원래 배열과 비교</strong></span>해 인덱스를 뽑아주면 된다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>트리셋은 자동 정렬이 되니 손댈 필요가 없다.<br />
맵에 인덱스를 value로 저장 후 원래 배열을 순회하며 맵에서 꺼내다 출력한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 처음 입력받을 배열</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
<span class="c1">// 중복제거 및 정렬용 트리셋</span>
<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 압축 매핑용 맵</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">token</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
	<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 맵에 매핑</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
	<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">(),</span> <span class="n">idx</span><span class="o">++);</span>
<span class="o">}</span>

<span class="c1">// 출력</span>
<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">])).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-18-18870/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>이상하다 4년전이면 컬렉션 쓰는 법 정도는 알았을 텐데…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-18-18870.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="18870" /><category term="좌표 압축" /><category term="정렬" /><summary type="html"><![CDATA[백준 18870번 좌표 압축 JAVA 문제풀이]]></summary></entry><entry><title type="html">5430번 AC</title><link href="https://movingwoo.com/boj/java/2025/06/17/5430.html" rel="alternate" type="text/html" title="5430번 AC" /><published>2025-06-17T07:00:00+00:00</published><updated>2025-06-17T07:00:00+00:00</updated><id>https://movingwoo.com/boj/java/2025/06/17/5430</id><content type="html" xml:base="https://movingwoo.com/boj/java/2025/06/17/5430.html"><![CDATA[<blockquote>
  <h4 id="이왜틀">이왜틀?</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-17-5410/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/5430">5430번 AC - 백준</a></p>

<p>과거의 나는 이걸 왜 틀렸을까?<br />
틀린 문제를 파헤쳐보는 시간 <span style="color: orange;"><strong>이왜틀?</strong></span></p>

<p>대부분 java로 틀렸던 문제들이라 웬만하면 java로 다시 해결하지 않을까 싶다.<br />
아무튼 이 문제는 5년 전에 런타임 에러 1회 이후로 손을 안댄 것 같은데…</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span><span class="n">z</span><span class="o">){</span>
		<span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
				<span class="nc">BufferedWriter</span> <span class="n">bw</span><span class="o">=</span><span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">tc</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			<span class="k">while</span><span class="o">(</span><span class="n">tc</span><span class="o">--&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="kt">char</span><span class="o">[]</span> <span class="n">p</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
				<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="kt">boolean</span> <span class="n">chk</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
				<span class="nc">String</span> <span class="n">q</span><span class="o">=</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
				<span class="nc">StringTokenizer</span> <span class="n">st</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="n">q</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">),</span><span class="s">","</span><span class="o">);</span>
				<span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deq</span><span class="o">=</span><span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
				<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="n">deq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
					<span class="kt">char</span> <span class="n">c</span><span class="o">=</span><span class="n">p</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
					<span class="k">if</span><span class="o">(</span><span class="n">c</span><span class="o">==</span><span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
						<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stk</span><span class="o">=</span><span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
						<span class="k">while</span><span class="o">(!</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">stk</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
						<span class="k">while</span><span class="o">(!</span><span class="n">stk</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">deq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stk</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
					<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
						<span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
							<span class="n">chk</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
							<span class="k">break</span><span class="o">;</span>
						<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
							<span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
						<span class="o">}</span>
					<span class="o">}</span>
				<span class="o">}</span>
				<span class="k">if</span><span class="o">(</span><span class="n">chk</span><span class="o">)</span> <span class="o">{</span>
					<span class="nc">StringBuilder</span> <span class="n">sb</span><span class="o">=</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
					<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
					<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
						<span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">deq</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
						<span class="k">if</span><span class="o">(</span><span class="n">deq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
							<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">"]"</span><span class="o">);</span>
							<span class="k">break</span><span class="o">;</span>
						<span class="o">}</span>
						<span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">","</span><span class="o">);</span>
					<span class="o">}</span>
					<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span><span class="s">"\n"</span><span class="o">);</span>
				<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
					<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"error\n"</span><span class="o">);</span>
				<span class="o">}</span>
				
			<span class="o">}</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>디큐를 쓴 건 좋은데 마지막에 <span style="color: orange;"><strong>deq.pollFirst() 이전에 널체크</strong></span>를 했어야 하지 않을까?<br />
모르겠고 머리아프니 새로 짜는게 낫겠다.<br />
주석도 하나도 없어서 보기 싫다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>입력이 고약한게 java 쓰기 싫은데… 그래도 java로 마무리 지어야겠다.<br />
<span style="color: orange;"><strong>그냥 잘 받아서 잘 출력</strong></span>하면 그만인데 왜 틀렸을까</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-그지같은-입력-받기">1. 그지같은 입력 받기</h5>

<p>무조건 깔끔하게 짜는게 목표라서 스캐너를 사용한다.<br />
숫자 리스트는 앞 뒤 대괄호를 떼어주고 분해해서 deque에 넣는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		
<span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">());</span>

<span class="k">while</span><span class="o">(</span><span class="no">T</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">char</span><span class="o">[]</span> <span class="n">p</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
	<span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span> <span class="c1">// n은 쓸데없음</span>
	<span class="nc">String</span> <span class="n">x</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
	<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// 앞뒤 대괄호 제거</span>
	
	<span class="c1">// deque</span>
	<span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
	
	<span class="k">if</span><span class="o">(!</span><span class="n">x</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="s">","</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">deque</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()));</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-명령-수행하여-출력">2. 명령 수행하여 출력</h5>

<p>커서 역할을 할 불 값을 두고 R 명령어 시 변경한다.<br />
D 명령어 시 예외처리해주며 poll 한다.</p>

<p>출력 시에는 앞 뒤에 다시 대괄호가 붙어야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="n">front</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">error</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

<span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">oper</span> <span class="o">:</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">oper</span> <span class="o">==</span> <span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">front</span> <span class="o">=</span> <span class="o">!</span><span class="n">front</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// poll 할때만 error check</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">oper</span> <span class="o">==</span> <span class="sc">'D'</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="k">break</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">if</span> <span class="o">(</span><span class="n">front</span><span class="o">)</span> <span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
		<span class="k">else</span> <span class="n">deque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">error</span><span class="o">)</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"error"</span><span class="o">);</span>
<span class="k">else</span> <span class="o">{</span>
	<span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
	
	<span class="c1">// deque 출력</span>
	<span class="k">while</span><span class="o">(!</span><span class="n">deque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
		<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">""</span> <span class="o">:</span> <span class="s">","</span><span class="o">));</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">front</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
		<span class="k">else</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">());</span>
	<span class="o">}</span>
	
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/BOJ/Java/2025-06-17-5410/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>입력도 그지같은데 출력도 그지같아서 대괄호 출력 부분에서 실수가 나서 한 번 틀렸다.<br />
5년 전의 나야 내가 너를 구원했단다… 그곳에서는 편안하렴…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/BOJ/Java/2025-06-17-5430.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Java/" /><category term="JAVA" /><category term="알고리즘" /><category term="백준" /><category term="5430" /><category term="AC" /><category term="구현" /><summary type="html"><![CDATA[백준 5430번 AC JAVA 문제풀이]]></summary></entry><entry><title type="html">3655번 먼저 가세요</title><link href="https://movingwoo.com/boj/python/2025/06/16/3655.html" rel="alternate" type="text/html" title="3655번 먼저 가세요" /><published>2025-06-16T08:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/python/2025/06/16/3655</id><content type="html" xml:base="https://movingwoo.com/boj/python/2025/06/16/3655.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-16-3655/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/3655">3655번 먼저 가세요 - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>쉬워보였는데 생각할게 좀 많다.<br />
양보를 하게되면 그룹의 첫 사람과 마지막 사람의 순서차이 * 5초만큼 이득이다.<br />
공식 잘 만들면 되려나 싶어서 계산해봤는데 너무 복잡하다.<br />
고려할게 너무 많다.</p>

<p>그렇다면 그리디는 어떨까?<br />
큐를 만들어서 넣고 만지작거리는데 너무 오래걸릴 것 같은 예감<br />
그리디도 결국 시뮬레이션인데 넣다 뺐다 하다보니 이게 맞나 싶다.</p>

<p>복잡한 두번째 예제를 보며 다시 정리를 해보자.</p>

<p><span style="color: orange;"><strong>Ab9AAb2bC2</strong></span></p>

<p>양보받은 경우를 가정하고 그룹별로 정리한다면?<br />
그룹의 가장 마지막 사람이 앞으로 당겨오는 느낌으로 정리해야한다.<br />
양보를 하면서 손해가 발생하면 절대 안된다.</p>

<p><span style="color: orange;"><strong>9AAAbbbC22</strong></span></p>

<p>이렇게 하고 각 그룹의 이득을 계산해보면(처음 줄의 마지막 인덱스와 정리 후 마지막 인덱스의 차)<br />
<span style="color: orange;"><strong>A - 1</strong></span><br />
<span style="color: orange;"><strong>b - 1</strong></span><br />
<span style="color: orange;"><strong>9 - 2</strong></span><br />
<span style="color: orange;"><strong>2 - 0</strong></span><br />
<span style="color: orange;"><strong>C - 1</strong></span></p>

<p>여기에 시간 5초와 각 그룹원의 수를 곱해주면<br />
<span style="color: orange;"><strong>1 * 5 * 3 + 1 * 5 * 3 + 2 * 5 * 1 + 0 * 5 * 2 + 1 * 5 * 1 = 45</strong></span><br />
정답이 나왔다.</p>

<p>결국 정렬이 관건으로 보인다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-정렬">1. 정렬</h5>

<p>각 그룹의 전체 인원 수와 최초 상태에서의 마지막 인덱스를 찾아서 리스트로 만든 후 정렬한다.<br />
분명 sort 함수를 쓰면 될건데…</p>

<p>Java나 C는 정렬함수를 커스텀해봤는데 Python은 해본 적이 없다.<br />
일단 그냥 선택정렬을 직접 구현하고 풀고 난 다음에 공부하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">())</span>
<span class="n">people</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>

<span class="n">count</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">last_index</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># 각 그룹 별 인원 수 카운팅
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>

    <span class="k">if</span> <span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">count</span><span class="p">:</span>
        <span class="n">count</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">count</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="c1"># 그룹의 마지막 인덱스
</span>    <span class="n">last_index</span><span class="p">[</span><span class="n">people</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>


<span class="n">groups</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>

<span class="c1"># 그룹의 마지막 인덱스 기준으로 선택 정렬 
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">groups</span><span class="p">)):</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">groups</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">groups</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">j</span>

    <span class="n">groups</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">groups</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">groups</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="2-절약시간-구하기">2. 절약시간 구하기</h5>

<p>위에서 예제로 확인했듯이 실제 절약된 시간은 (저장해둔 마지막 인덱스 - 현재 마지막 인덱스) * 5 * 인원 수 이다.<br />
정렬한 리스트와 미리 찾아둔 값을 비교하여 계산한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># 실제 절약된 시간 = (저장해둔 마지막 인덱스 - 현재 마지막 인덱스) * 5 * 인원 수
</span><span class="k">for</span> <span class="n">group</span><span class="p">,</span> <span class="n">index</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
    <span class="n">group_count</span> <span class="o">=</span> <span class="n">count</span><span class="p">[</span><span class="n">group</span><span class="p">]</span>
    <span class="n">last_group_idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">group_count</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="n">time</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">last_group_idx</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">group_count</span>

    <span class="n">result</span> <span class="o">+=</span> <span class="n">time</span>
    <span class="n">idx</span> <span class="o">+=</span> <span class="n">group_count</span>

<span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-16-3655/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>파이썬 sort 함수를 쓰면 어떻게 되는지 확인한다.<br />
람다식을 쓰면 이렇게 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">groups</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>이걸 def로 풀어쓰면 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_last_index</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="n">groups</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">last_index</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">get_last_index</span><span class="p">)</span>
</code></pre></div></div>

<p>풀어쓰니 모양이 익숙한게 자바랑 비슷해보인다.<br />
다음에 정렬할 일 있으면 활용할 수 있겠다.</p>

<p>쉬운문제인줄 알고 대충 풀다가 어? 어? 하면서 갈아엎느라 유독 변수명이 개판된거 같다.<br />
원래 변수명 신경쓰는 편은 아니지만 맘에 걸린다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Python/2025-06-16-3655.py">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/Python/" /><category term="PYTHON" /><category term="알고리즘" /><category term="백준" /><category term="3655" /><category term="먼저 가세요" /><category term="정렬" /><summary type="html"><![CDATA[백준 3655번 먼저 가세요 PYTHON 문제풀이]]></summary></entry><entry><title type="html">10722번 Binary Mobile Tree</title><link href="https://movingwoo.com/boj/c++/2025/06/16/10722.html" rel="alternate" type="text/html" title="10722번 Binary Mobile Tree" /><published>2025-06-16T05:00:00+00:00</published><updated>2025-06-17T06:00:00+00:00</updated><id>https://movingwoo.com/boj/c++/2025/06/16/10722</id><content type="html" xml:base="https://movingwoo.com/boj/c++/2025/06/16/10722.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-16-10722/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/10722">10722번 Binary Mobile Tree - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>모빌의 크기를 구하는 문제인데 눈여겨볼 조건은 아래인 것 같다.</p>
<ul>
  <li><span style="color: orange;"><strong>양수는 구슬 음수는 막대</strong></span></li>
  <li><span style="color: orange;"><strong>1번 막대가 루트 노드 (-1)</strong></span></li>
  <li><span style="color: orange;"><strong>구슬은 질량만 있고 부피는 없음</strong></span></li>
</ul>

<p>DFS를 사용해서 탐색하며 질량과 막대너비를 전달하면 되겠지 아마</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>재귀호출하며 길이와 질량 정보를 받아 합친다.<br />
<span style="color: orange;"><strong>왼쪽 질량 * 왼쪽 거리 == 오른쪽 질량 * 오른쪽 거리</strong></span> 공식에 따라 양쪽 거리를 구하고<br />
서브트리가 반대로 퍼지는 걸 고려해서 좌우 폭을 구해 더해서 출력한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DFS</span>
<span class="n">tuple</span><span class="o">&lt;</span><span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="p">,</span> <span class="kt">double</span><span class="o">&gt;</span> <span class="n">DFS</span><span class="p">(</span><span class="kt">int</span> <span class="n">node</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">bar</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 양수면 구슬, 질량만 있음</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">node</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">};</span>
    <span class="p">}</span>

    <span class="c1">// 음수면 막대</span>
    <span class="k">auto</span> <span class="p">[</span><span class="n">len</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="n">bar</span><span class="p">[</span><span class="o">-</span><span class="n">node</span><span class="p">];</span>


    <span class="k">auto</span> <span class="p">[</span><span class="n">lm</span><span class="p">,</span> <span class="n">ll</span><span class="p">,</span> <span class="n">lr</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>
    <span class="k">auto</span> <span class="p">[</span><span class="n">rm</span><span class="p">,</span> <span class="n">rl</span><span class="p">,</span> <span class="n">rr</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>

    <span class="kt">double</span> <span class="n">tm</span> <span class="o">=</span> <span class="n">lm</span> <span class="o">+</span> <span class="n">rm</span><span class="p">;</span>

    <span class="c1">// 왼쪽 질량 * 왼쪽 거리 == 오른쪽 질량 * 오른쪽 거리</span>
    <span class="kt">double</span> <span class="n">ldist</span> <span class="o">=</span> <span class="n">len</span> <span class="o">*</span> <span class="p">(</span><span class="n">rm</span> <span class="o">/</span> <span class="n">tm</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">rdist</span> <span class="o">=</span> <span class="n">len</span> <span class="o">-</span> <span class="n">ldist</span><span class="p">;</span>

    <span class="c1">// 서브트리가 반대로 퍼지는 경우를 고려해야함</span>
    <span class="kt">double</span> <span class="n">lw</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="o">-</span><span class="n">ldist</span> <span class="o">-</span> <span class="n">ll</span><span class="p">,</span> <span class="n">rdist</span> <span class="o">-</span> <span class="n">rl</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">rw</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="o">-</span><span class="n">ldist</span> <span class="o">+</span> <span class="n">lr</span><span class="p">,</span> <span class="n">rdist</span> <span class="o">+</span> <span class="n">rr</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span><span class="n">tm</span><span class="p">,</span> <span class="o">-</span><span class="n">lw</span><span class="p">,</span> <span class="n">rw</span><span class="p">};</span>
<span class="p">}</span>

<span class="c1">// ... 중략 ...</span>

<span class="c1">// 루트 노드는 -1</span>
<span class="k">auto</span> <span class="p">[</span><span class="n">mass</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">DFS</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">bar</span><span class="p">);</span>

<span class="n">printf</span><span class="p">(</span><span class="s">"%.6f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-16-10722/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>auto 사용에 더 익숙해져야겠다.<br />
좋은 건 잘 써먹어야지<br />
엄청 깨끗하고 짧고 좋지 않은가?</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/C%2B%2B/2025-06-16-10722.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="BOJ/C++/" /><category term="C++" /><category term="알고리즘" /><category term="백준" /><category term="10722" /><category term="Binary Mobile Tree" /><category term="DFS" /><summary type="html"><![CDATA[백준 10722번 Binary Mobile Tree C++ 문제풀이]]></summary></entry></feed>