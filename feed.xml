<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://movingwoo.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://movingwoo.com/" rel="alternate" type="text/html" hreflang="ko-KR" /><updated>2025-06-13T07:51:48+00:00</updated><id>https://movingwoo.com/feed.xml</id><title type="html">뭐라도 하겠지</title><subtitle>나도 사람인데 뭐라도 하겠지</subtitle><entry><title type="html">24008번 Catch Them All</title><link href="https://movingwoo.com/random-solve/java/2025/06/13/24008.html" rel="alternate" type="text/html" title="24008번 Catch Them All" /><published>2025-06-13T07:00:00+00:00</published><updated>2025-06-13T07:00:00+00:00</updated><id>https://movingwoo.com/random-solve/java/2025/06/13/24008</id><content type="html" xml:base="https://movingwoo.com/random-solve/java/2025/06/13/24008.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-13-24008/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/24008">24008번 Catch Them All - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>Codejamon GO 게임을 한다.<br />
도시는 1부터 N까지 장소가 있으며 M개의 양방향 도로가 있고 <span style="color: orange;"><strong>시작 지점은 항상 1</strong></span>이다.</p>

<p>Codejamon이 랜덤 장소에 등장하면 가장 빠른 경로로 이동해 잡는다.<br />
잡은 즉시 다른 랜덤 위치에 Codejamon이 나타난다.</p>

<p>총 P마리 Codejamon을 잡을 때 기대 소요 시간을 구하시오.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>푸키먼 고를 흉내낸 문제.</p>

<p>현재 장소를 제외한 무작위 위치에 푸키먼이 등장하는데<br />
우선 각 위치에서 다른 모든 위치까지의 최단 거리를 알아야한다.</p>

<p>거리를 알게되면 이동시간을 구할 수 있고 이동시간을 알면 평균을 낼 수 있다.<br />
이를 P번 반복해서 기대 소요 시간을 구한다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-그래프-그리기">1. 그래프 그리기</h5>

<p>입력받아서 그래프를 그려준다.<br />
<span style="color: orange;"><strong>중복 간선이 없다는게 보장</strong></span>되므로 그냥 쑥쑥 집어넣기만 하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
	<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">))){</span>
	
	<span class="kt">int</span> <span class="no">T</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span>
	
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="no">T</span> <span class="o">;</span> <span class="n">t</span><span class="o">++)</span> <span class="o">{</span>
		
		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">(),</span> <span class="s">" "</span><span class="o">);</span>
		<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="kt">int</span> <span class="no">P</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		
		<span class="c1">// 그래프 초기화</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="c1">// U V D가 크지않아서 적당히 큰 값 세팅</span>
				<span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">100000</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="c1">// 간선 등록</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">M</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">trim</span><span class="o">(),</span> <span class="s">" "</span><span class="o">);</span>
			
			<span class="kt">int</span> <span class="no">U</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">V</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">D</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="c1">// 양방향</span>
			<span class="n">dist</span><span class="o">[</span><span class="no">U</span><span class="o">][</span><span class="no">V</span><span class="o">]</span> <span class="o">=</span> <span class="no">D</span><span class="o">;</span>
			<span class="n">dist</span><span class="o">[</span><span class="no">V</span><span class="o">][</span><span class="no">U</span><span class="o">]</span> <span class="o">=</span> <span class="no">D</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-최단거리">2. 최단거리</h5>

<p><span style="color: orange;"><strong>플로이드 워셜 알고리즘</strong></span>을 사용한다.<br />
시간 복잡도가 O(N^3) 인데 N이 크지가 않아서 괜찮을거다.<br />
다익스트라보다 간단하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 플로이드 워셜 알고리즘</span>
<span class="c1">// 경유지 k가 가장 바깥</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
			<span class="c1">// k 를 경유해서 가는게 더 빠르면 갱신</span>
			<span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">+</span> <span class="n">dist</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">j</span><span class="o">])</span> <span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="3-시간-계산">3. 시간 계산</h5>

<p>원래 대충 근사값 계산했는데 계속 틀렸다고해서 수학공부를 좀 진행해야했다.<br />
단순 근사값 계산 대신 <span style="color: orange;"><strong>마르코프 체인</strong></span>을 활용해 P (최대 10^9) 에 대한 누적 기대 시간을 효율적으로 추정한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 시간 계산</span>
<span class="c1">// 첫번째는 반드시 1번에서 출발</span>
<span class="kt">double</span> <span class="n">start</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">start</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
<span class="o">}</span>
<span class="n">start</span> <span class="o">/=</span> <span class="o">(</span><span class="kt">double</span><span class="o">)(</span><span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

<span class="c1">// 같은 위치 제외 모든 거리의 평균</span>
<span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
		
		<span class="n">result</span> <span class="o">+=</span> <span class="n">dist</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
	<span class="o">}</span>
<span class="o">}</span>
<span class="c1">// N * (N - 1)</span>
<span class="n">result</span> <span class="o">/=</span> <span class="o">(</span><span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="kt">double</span><span class="o">)(</span><span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>

<span class="c1">// 근사값 계산했더니 틀려서 상세하게 접근</span>
<span class="c1">// 람다</span>
<span class="kt">double</span> <span class="n">lambda</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span> <span class="o">/</span> <span class="o">(</span><span class="n">nmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
<span class="c1">// 기하급수 합</span>
<span class="kt">double</span> <span class="n">geoSum</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">lambda</span><span class="o">,</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">2</span><span class="o">]))</span> <span class="o">/</span> <span class="o">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">lambda</span><span class="o">);</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="n">nmp</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="o">(</span><span class="n">start</span> <span class="o">-</span> <span class="n">result</span><span class="o">)</span> <span class="o">*</span> <span class="n">geoSum</span><span class="o">;</span>

<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Case #%d: %.6f\n"</span><span class="o">,</span> <span class="n">t</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-13-24008/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>이상한 일이 있다.<br />
분명히 처음에 예제 입력이 너무 개판이었다.<br />
한 줄에 3개씩 숫자가 들어와야하는데 4개 2개 이렇게 개판으로 들어와서 입력을 희한하게도 주네 했는데<br />
<span style="color: red;"><strong>문제 맞추고 다시 보니 예제가 3개씩 들어오는 것으로 정상화 되어있다.</strong></span></p>

<p><span style="color: red;"><strong>최면 걸렸나? 사이버 귀신인가?</strong></span></p>

<p>그래서 다시 입력받는 부분 간소화하고 돌렸더니 메모리와 시간이 확 줄었다.<br />
진짜 무슨 일이 일어난거지</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-13-24008.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/Java/" /><summary type="html"><![CDATA[문제 24008번 Catch Them All - 백준 번역 Codejamon GO 게임을 한다. 도시는 1부터 N까지 장소가 있으며 M개의 양방향 도로가 있고 시작 지점은 항상 1이다. Codejamon이 랜덤 장소에 등장하면 가장 빠른 경로로 이동해 잡는다. 잡은 즉시 다른 랜덤 위치에 Codejamon이 나타난다. 총 P마리 Codejamon을 잡을 때 기대 소요 시간을 구하시오. 설계 푸키먼 고를 흉내낸 문제. 현재 장소를 제외한 무작위 위치에 푸키먼이 등장하는데 우선 각 위치에서 다른 모든 위치까지의 최단 거리를 알아야한다. 거리를 알게되면 이동시간을 구할 수 있고 이동시간을 알면 평균을 낼 수 있다. 이를 P번 반복해서 기대 소요 시간을 구한다. 구현 1. 그래프 그리기 입력받아서 그래프를 그려준다. 중복 간선이 없다는게 보장되므로 그냥 쑥쑥 집어넣기만 하면 된다. try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))){ int T = Integer.parseInt(br.readLine().trim()); for (int t = 1 ; t &lt;= T ; t++) { StringTokenizer st = new StringTokenizer(br.readLine().trim(), " "); int N = Integer.parseInt(st.nextToken()); int M = Integer.parseInt(st.nextToken()); int P = Integer.parseInt(st.nextToken()); // 그래프 초기화 int[][] dist = new int[N + 1][N + 1]; for( int i = 1 ; i &lt;= N ; i++) { for (int j = 1 ; j &lt;= N ; j++) { // U V D가 크지않아서 적당히 큰 값 세팅 dist[i][j] = i == j ? 0 : 100000; } } // 간선 등록 for (int i = 0 ; i &lt; M ; i++) { st = new StringTokenizer(br.readLine().trim(), " "); int U = Integer.parseInt(st.nextToken()); int V = Integer.parseInt(st.nextToken()); int D = Integer.parseInt(st.nextToken()); // 양방향 dist[U][V] = D; dist[V][U] = D; } } }catch(Exception e) { e.printStackTrace(); } 2. 최단거리 플로이드 워셜 알고리즘을 사용한다. 시간 복잡도가 O(N^3) 인데 N이 크지가 않아서 괜찮을거다. 다익스트라보다 간단하다. // 플로이드 워셜 알고리즘 // 경유지 k가 가장 바깥 for (int k = 1; k &lt;= nmp[0] ; k++) { for (int i = 1 ; i &lt;= nmp[0] ; i++) { for (int j = 1 ; j &lt;= nmp[0] ; j++) { // k 를 경유해서 가는게 더 빠르면 갱신 dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]) ; } } } 3. 시간 계산 원래 대충 근사값 계산했는데 계속 틀렸다고해서 수학공부를 좀 진행해야했다. 단순 근사값 계산 대신 마르코프 체인을 활용해 P (최대 10^9) 에 대한 누적 기대 시간을 효율적으로 추정한다. // 시간 계산 // 첫번째는 반드시 1번에서 출발 double start = 0.0; for (int i = 2 ; i &lt;= nmp[0] ; i++) { start += dist[1][i]; } start /= (double)(nmp[0] - 1); // 같은 위치 제외 모든 거리의 평균 double result = 0.0; for (int i = 1 ; i &lt;= nmp[0] ; i++) { for (int j = 1 ; j &lt;= nmp[0] ; j++) { if (i == j) continue; result += dist[i][j]; } } // N * (N - 1) result /= (nmp[0] * (double)(nmp[0] - 1)); // 근사값 계산했더니 틀려서 상세하게 접근 // 람다 double lambda = -1.0 / (nmp[0] - 1); // 기하급수 합 double geoSum = (1 - Math.pow(lambda, nmp[2])) / (1 - lambda); result = result * nmp[2] + (start - result) * geoSum; bw.write(String.format("Case #%d: %.6f\n", t, result)); 채점 반성 이상한 일이 있다. 분명히 처음에 예제 입력이 너무 개판이었다. 한 줄에 3개씩 숫자가 들어와야하는데 4개 2개 이렇게 개판으로 들어와서 입력을 희한하게도 주네 했는데 문제 맞추고 다시 보니 예제가 3개씩 들어오는 것으로 정상화 되어있다. 최면 걸렸나? 사이버 귀신인가? 그래서 다시 입력받는 부분 간소화하고 돌렸더니 메모리와 시간이 확 줄었다. 진짜 무슨 일이 일어난거지 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">16256번 Painting the Wall</title><link href="https://movingwoo.com/random-solve/c++/2025/06/13/16256.html" rel="alternate" type="text/html" title="16256번 Painting the Wall" /><published>2025-06-13T01:00:00+00:00</published><updated>2025-06-13T01:00:00+00:00</updated><id>https://movingwoo.com/random-solve/c++/2025/06/13/16256</id><content type="html" xml:base="https://movingwoo.com/random-solve/c++/2025/06/13/16256.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-13-16256/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/16256">16256번 Painting the Wall - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>정사각형 타일로 구성된 n * m 사이즈의 벽이 있다.<br />
타일의 일부는 램프다.(0이면 램프 1이면 타일)</p>

<p>타일에 페인트를 칠하려 한다.<br />
<span style="color: orange;"><strong>수직 또는 수평으로 연속된 타일이 있을 때 각 타일은 모두 다른 색의 페인트로 칠해야한다.</strong></span><br />
서로 다른 색상의 페인트 k개가 있을 때 모두 다른 색상으로 벽을 칠할 수 있으면 YES와 페인트칠 한 예시를<br />
불가능하면 NO를 출력한다.</p>

<p>k개의 페인트를 모두 사용할 필요는 없다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>페인트칠 불가능한 조건부터 생각해보자.<br />
<span style="color: orange;"><strong>타일이 연속된 구간 중 가장 긴 구간의 길이가 k보다 크면 색칠이 불가능</strong></span>하다.<br />
가령 1 1 1 인 경우 연속 구간의 페인트 색은 모두 달라야 하기 때문에 k가 3보다 작다면 NO를 출력해야한다.</p>

<p>구간 확인 후 색칠이 가능하면 각 연속 구간 내 1부터 k까지 칠해서 출력한다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-불가능한-경우">1. 불가능한 경우</h5>

<p>타일이 연속되는 구간을 확인해 k와 비교해서 페인트칠 가능한지 확인한다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">wall</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">));</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">paintable</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

<span class="c1">// 연속된 행 방향 타일 구간 탐색</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">paintable</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">paintable</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 연속된 열 방향 타일 구간 탐색</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">paintable</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">paintable</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">paintable</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"NO</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="2-가능한-경우">2. 가능한 경우</h5>

<p>색칠이 가능하면 겹치지 않게 숫자를 매긴다.<br />
겹치지만 않으면 되므로 mod 연산으로 대충 뿌려준다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 가능하면 페인트칠</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">painted_wall</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 모든 행열 구간에서 중복되지 않게</span>
            <span class="n">painted_wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="n">k</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>    

<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"YES</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">painted_wall</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/C++/2025-06-13-16256/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>벡터가 아니라 배열로 쓰면 더 나았으려나?<br />
java면 배열로 했겠지만 C++라서 벡터를 사용한건데</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/C%2B%2B/2025-06-13-16256.cpp">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/C++/" /><summary type="html"><![CDATA[문제 16256번 Painting the Wall - 백준 번역 정사각형 타일로 구성된 n * m 사이즈의 벽이 있다. 타일의 일부는 램프다.(0이면 램프 1이면 타일) 타일에 페인트를 칠하려 한다. 수직 또는 수평으로 연속된 타일이 있을 때 각 타일은 모두 다른 색의 페인트로 칠해야한다. 서로 다른 색상의 페인트 k개가 있을 때 모두 다른 색상으로 벽을 칠할 수 있으면 YES와 페인트칠 한 예시를 불가능하면 NO를 출력한다. k개의 페인트를 모두 사용할 필요는 없다. 설계 페인트칠 불가능한 조건부터 생각해보자. 타일이 연속된 구간 중 가장 긴 구간의 길이가 k보다 크면 색칠이 불가능하다. 가령 1 1 1 인 경우 연속 구간의 페인트 색은 모두 달라야 하기 때문에 k가 3보다 작다면 NO를 출력해야한다. 구간 확인 후 색칠이 가능하면 각 연속 구간 내 1부터 k까지 칠해서 출력한다. 구현 1. 불가능한 경우 타일이 연속되는 구간을 확인해 k와 비교해서 페인트칠 가능한지 확인한다. vector&lt;vector&lt;int&gt;&gt; wall(n, vector&lt;int&gt;(m)); for (int i = 0; i &lt; n; ++i) { for (int j = 0; j &lt; m; ++j) { cin &gt;&gt; wall[i][j]; } } bool paintable = true; // 연속된 행 방향 타일 구간 탐색 for (int i = 0 ; i &lt; n &amp;&amp; paintable ; ++i) { int cnt = 0; for (int j = 0 ; j &lt;= m ; ++j) { if (j &lt; m &amp;&amp; wall[i][j] == 1) { cnt++; } else { if (cnt &gt; k) { paintable = false; break; } cnt = 0; } } } // 연속된 열 방향 타일 구간 탐색 for (int j = 0 ; j &lt; m &amp;&amp; paintable ; ++j) { int cnt = 0; for (int i = 0 ; i &lt;= n ; ++i) { if (i &lt; n &amp;&amp; wall[i][j] == 1) { cnt++; } else { if (cnt &gt; k) { paintable = false; break; } cnt = 0; } } } if (!paintable) { cout &lt;&lt; "NO\n"; continue; } 2. 가능한 경우 색칠이 가능하면 겹치지 않게 숫자를 매긴다. 겹치지만 않으면 되므로 mod 연산으로 대충 뿌려준다. // 가능하면 페인트칠 vector&lt;vector&lt;int&gt;&gt; painted_wall(n, vector&lt;int&gt;(m, 0)); for (int i = 0; i &lt; n; ++i){ for (int j = 0; j &lt; m; ++j) { if (wall[i][j] == 1) { // 모든 행열 구간에서 중복되지 않게 painted_wall[i][j] = ((i + j) % k) + 1; } } } cout &lt;&lt; "YES\n"; for (int i = 0 ; i &lt; n ; ++i) { for (int j = 0 ; j &lt; m ; ++j) { cout &lt;&lt; painted_wall[i][j] &lt;&lt; " "; } cout &lt;&lt; "\n"; } 채점 반성 벡터가 아니라 배열로 쓰면 더 나았으려나? java면 배열로 했겠지만 C++라서 벡터를 사용한건데 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">제비 뽑기</title><link href="https://movingwoo.com/one-pan/shortcuts/2025/06/11/Drawing-Lots.html" rel="alternate" type="text/html" title="제비 뽑기" /><published>2025-06-11T02:00:00+00:00</published><updated>2025-06-11T02:00:00+00:00</updated><id>https://movingwoo.com/one-pan/shortcuts/2025/06/11/Drawing%20Lots</id><content type="html" xml:base="https://movingwoo.com/one-pan/shortcuts/2025/06/11/Drawing-Lots.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p>점심 먹고 커피를 누가 살지, 술 마시고 대표로 누가 결제할지 등<br />
각종 내기할 때 준비물이 필요 없고 밸런스가 잘 맞는 게임은 가위바위보가 있다.<br />
좀 더 익스트림한 경험을 원하면 사다리타기나 핀볼을 하기도 한다.</p>

<p>오늘은 단축어로 내기에 쓸 수 있는 제비뽑기를 만들어 볼 것이다.<br />
js를 사용하지 않으면 GUI가 극적이진 않지만 직접 만들어서 사용하면 제법 재미있다.</p>

<p>단축어 js 연동은 다소 불편하기도 하고…</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>입력을 받을 때 인원 수에 따라 항목은 얼마든지 늘어날 수 있게 설정해야한다.</p>

<p>입력 받으면 무작위 셔플 후 각각에 인덱스를 부여해 하나의 제비로 만든다.<br />
제비 클래스를 구현할 수는 없으므로 <span style="color: orange;"><strong>사전</strong></span>을 사용하는게 좋겠다.</p>

<p>각 제비는 하나를 선택해 하나씩 열어볼 수 있게하고<br />
전체를 한 번에 열어볼 수 있게도 만든다.</p>

<p>어떤 단축어 블럭을 사용할지 고민하는게 어렵고 로직 자체는 심플하다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-목록-입력받아-사전-생성">1. 목록 입력받아 사전 생성</h5>

<p>기본 값으로 당첨 하나와 꽝 2개 총 3개 항목을 설정하고 보여준다.<br />
당첨과 꽝 문구는 변경할 수 있게 하고 항목을 추가할 수 있게 한다.</p>

<p>필터 블럭으로 제비를 무작위 셔플하고 목록 수 만큼 반복문을 구성한다.<br />
3가지 작업을 하게 되는데</p>
<ul>
  <li><span style="color: orange;"><strong>인덱스와 셔플된 값으로 사전</strong></span> 구성</li>
  <li>목록을 선택할 수 있게 별도 <span style="color: orange;"><strong>인덱스 변수</strong></span> 구성</li>
  <li>전체 보기 시 출력할 <span style="color: orange;"><strong>텍스트 변수</strong></span> 구성</li>
</ul>

<p>전체 보기의 경우 뒤에서 사용하게 될건데<br />
결과 보기 블럭에 사전을 그냥 넣을 경우 json 형식으로 출력한다.<br />
보기 불편하기 때문에 결과를 텍스트로 미리 다듬어서 변수로 선언해두고<br />
전체 보기 할 경우 해당 텍스트 변수를 출력한다.</p>

<p>반복문이 종료되면 사용자에게 보여줄 목록 변수에 ‘전체 보기’ 항목을 넣어서 한 번에 전체를 볼 수 있게 한다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img01.webp" alt="img01" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img02.webp" alt="img02" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img03.webp" alt="img03" width="300" style="height: auto;" /></p>

<h5 id="2-반복문과-조건문">2. 반복문과 조건문</h5>

<p>반복 블럭을 새로 구성해서 인덱스 변수를 목록으로 보여준다.</p>

<p>만약 전체 보기를 선택할 경우에 미리 선언해둔 전체 보기 변수를 출력 후 단축어를 종료한다.<br />
그렇지 않으면 해당 인덱스의 값을 사전에서 가져와 출력한다.<br />
사전에서 값을 가져오면 인덱스 변수에서 선택한 값을 필터 블럭으로 제거해 남은 제비만을 다시 보여준다.</p>

<p>모든 제비를 열어보았다면 전체 보기 변수를 출력해 최종 결과를 출력한다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img04.webp" alt="img04" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img05.webp" alt="img05" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img06.webp" alt="img06" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p><span style="color: red;"><strong>당첨자는 오늘 커피를 산다!!!</strong></span></p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-11-Drawing Lots/img07.webp" alt="img07" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>ios 판올림할 때마다 단축어도 조금씩 바뀌는데<br />
원래 반복 블럭에 for each처럼 쓰는게 있었나 기억이 안난다.</p>

<p>사전 값 출력하려고 각각 반복 블럭을 사용해봤는데 예상한대로 동작하지 않아서 기본 반복 블럭을 사용했다.<br />
개발자 문서를 찾아봐야하나…</p>

<p>단축어의 장점은 제공되는 기본 기능을 자유롭게 확장할 수 있다는 것이며
단축어의 단점은 제공되는 기본 기능만 자유롭게 확장할 수 있다는 것</p>

<p>api 연동까지는 어떻게 편하게 써도 js 엮이는 순간 골치아파지는데<br />
나중에 포스트로 다뤄볼 기회가 있을 것이다.</p>

<blockquote>
  <h4 id="공유">공유</h4>
  <hr />
</blockquote>

<p>사파리에서 링크 실행</p>

<p><a href="https://www.icloud.com/shortcuts/1846ec094ab34bf79d689d4dcbd32a36">제비 뽑기 - iCloud Link</a></p>]]></content><author><name>movingwoo</name></author><category term="one-pan/Shortcuts/" /><summary type="html"><![CDATA[개요 점심 먹고 커피를 누가 살지, 술 마시고 대표로 누가 결제할지 등 각종 내기할 때 준비물이 필요 없고 밸런스가 잘 맞는 게임은 가위바위보가 있다. 좀 더 익스트림한 경험을 원하면 사다리타기나 핀볼을 하기도 한다. 오늘은 단축어로 내기에 쓸 수 있는 제비뽑기를 만들어 볼 것이다. js를 사용하지 않으면 GUI가 극적이진 않지만 직접 만들어서 사용하면 제법 재미있다. 단축어 js 연동은 다소 불편하기도 하고… 설계 입력을 받을 때 인원 수에 따라 항목은 얼마든지 늘어날 수 있게 설정해야한다. 입력 받으면 무작위 셔플 후 각각에 인덱스를 부여해 하나의 제비로 만든다. 제비 클래스를 구현할 수는 없으므로 사전을 사용하는게 좋겠다. 각 제비는 하나를 선택해 하나씩 열어볼 수 있게하고 전체를 한 번에 열어볼 수 있게도 만든다. 어떤 단축어 블럭을 사용할지 고민하는게 어렵고 로직 자체는 심플하다. 구현 1. 목록 입력받아 사전 생성 기본 값으로 당첨 하나와 꽝 2개 총 3개 항목을 설정하고 보여준다. 당첨과 꽝 문구는 변경할 수 있게 하고 항목을 추가할 수 있게 한다. 필터 블럭으로 제비를 무작위 셔플하고 목록 수 만큼 반복문을 구성한다. 3가지 작업을 하게 되는데 인덱스와 셔플된 값으로 사전 구성 목록을 선택할 수 있게 별도 인덱스 변수 구성 전체 보기 시 출력할 텍스트 변수 구성 전체 보기의 경우 뒤에서 사용하게 될건데 결과 보기 블럭에 사전을 그냥 넣을 경우 json 형식으로 출력한다. 보기 불편하기 때문에 결과를 텍스트로 미리 다듬어서 변수로 선언해두고 전체 보기 할 경우 해당 텍스트 변수를 출력한다. 반복문이 종료되면 사용자에게 보여줄 목록 변수에 ‘전체 보기’ 항목을 넣어서 한 번에 전체를 볼 수 있게 한다. 2. 반복문과 조건문 반복 블럭을 새로 구성해서 인덱스 변수를 목록으로 보여준다. 만약 전체 보기를 선택할 경우에 미리 선언해둔 전체 보기 변수를 출력 후 단축어를 종료한다. 그렇지 않으면 해당 인덱스의 값을 사전에서 가져와 출력한다. 사전에서 값을 가져오면 인덱스 변수에서 선택한 값을 필터 블럭으로 제거해 남은 제비만을 다시 보여준다. 모든 제비를 열어보았다면 전체 보기 변수를 출력해 최종 결과를 출력한다. 완성 당첨자는 오늘 커피를 산다!!! 반성 ios 판올림할 때마다 단축어도 조금씩 바뀌는데 원래 반복 블럭에 for each처럼 쓰는게 있었나 기억이 안난다. 사전 값 출력하려고 각각 반복 블럭을 사용해봤는데 예상한대로 동작하지 않아서 기본 반복 블럭을 사용했다. 개발자 문서를 찾아봐야하나… 단축어의 장점은 제공되는 기본 기능을 자유롭게 확장할 수 있다는 것이며 단축어의 단점은 제공되는 기본 기능만 자유롭게 확장할 수 있다는 것 api 연동까지는 어떻게 편하게 써도 js 엮이는 순간 골치아파지는데 나중에 포스트로 다뤄볼 기회가 있을 것이다. 공유 사파리에서 링크 실행 제비 뽑기 - iCloud Link]]></summary></entry><entry><title type="html">21237번 Clockwise Fence</title><link href="https://movingwoo.com/random-solve/java/2025/06/10/21237.html" rel="alternate" type="text/html" title="21237번 Clockwise Fence" /><published>2025-06-10T01:00:00+00:00</published><updated>2025-06-10T01:00:00+00:00</updated><id>https://movingwoo.com/random-solve/java/2025/06/10/21237</id><content type="html" xml:base="https://movingwoo.com/random-solve/java/2025/06/10/21237.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-10-21237/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/21237">21237번 Clockwise Fence - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>울타리를 설치했는데 울타리가 시계 방향으로 설치되었는지 반시계 방향으로 설치되었는지 구하시오.<br />
시작점과 도착점은 같으며 울타리가 하나의 영역을 감싸고 있는게 보장된다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>신발끈 공식을 써서 양수면 반시계 방향, 음수면 시계 방향이다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>NSWE 형식으로 방향이 들어오니 Map으로 방향 별 더할 좌표를 구성해두고<br />
방향 데이터를 받아서 순회하며 신발끈 공식으로 면적을 구한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
<span class="c1">// 방향</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">dx</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'N'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'E'</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'S'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dx</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'W'</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">dy</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'N'</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'E'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'S'</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="n">dy</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">'W'</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

<span class="k">while</span><span class="o">(</span><span class="no">N</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">char</span><span class="o">[]</span> <span class="n">fences</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">toCharArray</span><span class="o">();</span>
	
	<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fences</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">fences</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">fences</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>

		<span class="c1">// 신발끈 공식</span>
		<span class="n">result</span> <span class="o">+=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">ny</span> <span class="o">-</span> <span class="n">y</span> <span class="o">*</span> <span class="n">nx</span><span class="o">;</span>

		<span class="c1">// 이전 좌표 갱신</span>
		<span class="n">x</span> <span class="o">=</span> <span class="n">nx</span><span class="o">;</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">ny</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="c1">// 음수면 시계 방향 아니면 반시계 방향</span>
	<span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"CW\n"</span><span class="o">);</span>
	<span class="k">else</span> <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"CCW\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-10-21237/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>파이썬 하다가 자바 보니까 코드가 못났다.<br />
점점 파이썬에 스며드는 중이다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-10-21237.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/Java/" /><summary type="html"><![CDATA[문제 21237번 Clockwise Fence - 백준 번역 울타리를 설치했는데 울타리가 시계 방향으로 설치되었는지 반시계 방향으로 설치되었는지 구하시오. 시작점과 도착점은 같으며 울타리가 하나의 영역을 감싸고 있는게 보장된다. 설계 신발끈 공식을 써서 양수면 반시계 방향, 음수면 시계 방향이다. 구현 NSWE 형식으로 방향이 들어오니 Map으로 방향 별 더할 좌표를 구성해두고 방향 데이터를 받아서 순회하며 신발끈 공식으로 면적을 구한다. int N = Integer.parseInt(br.readLine()); // 방향 Map&lt;Character, Integer&gt; dx = new HashMap&lt;&gt;(); dx.put('N', 0); dx.put('E', 1); dx.put('S', 0); dx.put('W', -1); Map&lt;Character, Integer&gt; dy = new HashMap&lt;&gt;(); dy.put('N', 1); dy.put('E', 0); dy.put('S', -1); dy.put('W', 0); while(N-- &gt; 0) { char[] fences = br.readLine().toCharArray(); int x = 0; int y = 0; int result = 0; for(int i = 0 ; i &lt; fences.length ; i++) { int nx = x + dx.get(fences[i]); int ny = y + dy.get(fences[i]); // 신발끈 공식 result += x * ny - y * nx; // 이전 좌표 갱신 x = nx; y = ny; } // 음수면 시계 방향 아니면 반시계 방향 if(result &lt; 0) bw.write("CW\n"); else bw.write("CCW\n"); } 채점 반성 파이썬 하다가 자바 보니까 코드가 못났다. 점점 파이썬에 스며드는 중이다. 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">하드웨어 모니터</title><link href="https://movingwoo.com/one-pan/python/2025/06/09/Hardware-Monitor.html" rel="alternate" type="text/html" title="하드웨어 모니터" /><published>2025-06-09T23:00:00+00:00</published><updated>2025-06-09T23:00:00+00:00</updated><id>https://movingwoo.com/one-pan/python/2025/06/09/Hardware%20Monitor</id><content type="html" xml:base="https://movingwoo.com/one-pan/python/2025/06/09/Hardware-Monitor.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img01.webp" alt="img01" /></p>

<p>알리에서 3.5인치 모니터를 주웠다.<br />
온도 체크하기가 불편해서 사봤는데 리소스 사용량도 보여주고 상당히 괜찮다.</p>

<p>제조사에서 드라이버를 제공해서 예쁜 테마를 가져다 그대로 쓸 수 있는데<br />
다소 불안한 감이 있고 이런 건 또 직접해야 제맛이다.<br />
필요없는 정보는 지우고 감성보다 기능성에 초점을 맞춘 새로운 테마를 만든다.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><a href="https://github.com/mathoudebine/turing-smart-screen-python">turing-smart-screen-python</a></p>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img02.webp" alt="img02" /></p>

<p>이 오픈소스 프로젝트는 소형 시스템 모니터에 각종 정보를 보기 좋게 표시해주는 프로그램이다.<br />
능력자들이 밥을 다 차려놨으니 나는 숟가락만 들면 되는 것이다.</p>

<p>소스코드를 다운로드 해 필요한 부분만 커스텀하고 사용할 수 있도록 하자.</p>

<p>내게 필요한 정보는</p>
<ul>
  <li>CPU, GPU 온도</li>
  <li>CPU 전체, 코어 별 사용량</li>
  <li>GPU, VRAM 사용량</li>
  <li>RAM 사용량</li>
  <li>디스크 사용량</li>
</ul>

<p>필요 없는 정보는</p>
<ul>
  <li>날짜</li>
  <li>날씨</li>
  <li>네트워크 사용량</li>
  <li>업타임</li>
</ul>

<p>아니 진짜 날짜 날씨는 왜 있지?<br />
메인 모니터나 휴대폰이 훨씬 잘 알려주는데</p>

<blockquote>
  <h4 id="커스텀">커스텀</h4>
  <hr />
</blockquote>

<h5 id="1-설치">1. 설치</h5>

<p>파이썬만 있으면 설치는 간편하다.</p>

<div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">pip</span> <span class="kd">install</span> <span class="na">-r </span><span class="kd">requirements</span>.txt
</code></pre></div></div>

<p>pip 의존성 설치 후 실행하면 켜진다.<br />
바로 실행하려면 <span style="color: orange;"><strong>main.py</strong></span>를, 설정 창을 띄우려면 <span style="color: orange;"><strong>configure.py</strong></span>를 실행한다.</p>

<div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">python</span> <span class="kd">configure</span>.py
</code></pre></div></div>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img03.webp" alt="img03" /></p>

<h5 id="2-커스텀-테마-생성">2. 커스텀 테마 생성</h5>

<p>테마 파일은 <span style="color: orange;"><strong>turing-smart-screen-python\res\themes</strong></span> 폴더에 위치해있다.<br />
MyCustomTheme 폴더를 생성하고 내부에 <span style="color: orange;"><strong>theme.yaml</strong></span> 파일을 생성한다.</p>

<p>구매한 3.5인치 모니터의 자체 프로그램 테마는 좀 다양한게 많아서 참고하려했더니<br />
.data 파일로 되어있어서 그냥 포기하고 새로 만들기로 한다.</p>

<p>3.5인치 모니터의 크기는 480 X 320 이고 배경은 검은색으로 만들거라 그림판으로 검은색 사진을 만들어 <span style="color: orange;"><strong>background.png</strong></span> 로 넣어준다.<br />
뭐 없으면 알아서 까만화면 될 줄 알았는데 오류 나더라…</p>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img04.webp" alt="img04" /></p>

<p>yaml 수정은 즉각 반영되니 테마 에디터를 띄어두고 yaml을 수정하며 맞추면 된다.</p>

<div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">python</span> <span class="kd">theme</span><span class="na">-editor</span>.py <span class="kd">MyCustomTheme</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img05.webp" alt="img05" /></p>

<h5 id="3-yaml-작성">3. yaml 작성</h5>

<p>기본적으로 yaml만 잘 작성해주면 해당 정보들을 알아서 가져온다.<br />
디폴트 테마를 예시로 삼아서 잘 작성해보자.</p>

<p>CPU와 디스크 쪽은 커스텀이 들어가야해서 머리아프다.</p>

<p>갱신은 디스크 제외 1초로 통일했다.<br />
1초 마다 사용량을 갱신할 의미가 있을까 싶어서 60초로 설정했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">display</span><span class="pi">:</span>
  <span class="na">DISPLAY_SIZE</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.5</span><span class="se">\"</span><span class="s">"</span>
  <span class="na">DISPLAY_ORIENTATION</span><span class="pi">:</span> <span class="s2">"</span><span class="s">landscape"</span>
  <span class="na">DISPLAY_REVERSE</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">DISPLAY_RGB_LED</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0,</span><span class="nv"> </span><span class="s">0,</span><span class="nv"> </span><span class="s">0"</span>

<span class="na">static_images</span><span class="pi">:</span>
  <span class="na">BACKGROUND</span><span class="pi">:</span>
    <span class="na">PATH</span><span class="pi">:</span> <span class="s">background.png</span>
    <span class="na">X</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">Y</span><span class="pi">:</span> <span class="m">0</span>
    <span class="na">WIDTH</span><span class="pi">:</span> <span class="m">480</span>
    <span class="na">HEIGHT</span><span class="pi">:</span> <span class="m">320</span>

<span class="na">STATS</span><span class="pi">:</span>
  <span class="na">CPU</span><span class="pi">:</span>
    <span class="na">PERCENTAGE</span><span class="pi">:</span>
      <span class="na">INTERVAL</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">TEXT</span><span class="pi">:</span>
        <span class="na">SHOW</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">X</span><span class="pi">:</span> <span class="m">70</span>
        <span class="na">Y</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">FONT</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jetbrains-mono/JetBrainsMono-Bold.ttf"</span>
        <span class="na">FONT_SIZE</span><span class="pi">:</span> <span class="m">22</span>
        <span class="na">FONT_COLOR</span><span class="pi">:</span> <span class="s2">"</span><span class="s">255,</span><span class="nv"> </span><span class="s">50,</span><span class="nv"> </span><span class="s">0"</span>
        <span class="na">BACKGROUND_COLOR</span><span class="pi">:</span> <span class="s">0, 0, </span><span class="m">0</span>
      <span class="na">GRAPH</span><span class="pi">:</span>
        <span class="na">SHOW</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">X</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">Y</span><span class="pi">:</span> <span class="m">50</span>
        <span class="na">WIDTH</span><span class="pi">:</span> <span class="m">200</span>
        <span class="na">HEIGHT</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">MIN_VALUE</span><span class="pi">:</span> <span class="m">0</span>
        <span class="na">MAX_VALUE</span><span class="pi">:</span> <span class="m">100</span>
        <span class="na">BAR_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BAR_OUTLINE</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">BAR_OUTLINE_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BACKGROUND_COLOR</span><span class="pi">:</span> <span class="s">0, 0, </span><span class="m">0</span>
    <span class="na">TEMPERATURE</span><span class="pi">:</span>
      <span class="na">INTERVAL</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">TEXT</span><span class="pi">:</span>
        <span class="na">SHOW</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">X</span><span class="pi">:</span> <span class="m">155</span>
        <span class="na">Y</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">FONT</span><span class="pi">:</span> <span class="s2">"</span><span class="s">jetbrains-mono/JetBrainsMono-Bold.ttf"</span>
        <span class="na">FONT_SIZE</span><span class="pi">:</span> <span class="m">22</span>
        <span class="na">FONT_COLOR</span><span class="pi">:</span> <span class="s2">"</span><span class="s">255,</span><span class="nv"> </span><span class="s">50,</span><span class="nv"> </span><span class="s">0"</span>
        <span class="na">BACKGROUND_COLOR</span><span class="pi">:</span> <span class="s">0, 0, </span><span class="m">0</span>
    <span class="na">CORE_0</span><span class="pi">:</span>
      <span class="na">GRAPH</span><span class="pi">:</span>
        <span class="na">SHOW</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">X</span><span class="pi">:</span> <span class="m">70</span>
        <span class="na">Y</span><span class="pi">:</span> <span class="m">80</span>
        <span class="na">WIDTH</span><span class="pi">:</span> <span class="m">150</span>
        <span class="na">HEIGHT</span><span class="pi">:</span> <span class="m">10</span>
        <span class="na">MIN_VALUE</span><span class="pi">:</span> <span class="m">0</span>
        <span class="na">MAX_VALUE</span><span class="pi">:</span> <span class="m">100</span>
        <span class="na">BAR_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BAR_OUTLINE</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">BAR_OUTLINE_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BACKGROUND_COLOR</span><span class="pi">:</span> <span class="s">0, 0, </span><span class="m">0</span>
    <span class="na">CORE_1</span><span class="pi">:</span>
      <span class="na">GRAPH</span><span class="pi">:</span>
        <span class="na">SHOW</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">X</span><span class="pi">:</span> <span class="m">70</span>
        <span class="na">Y</span><span class="pi">:</span> <span class="m">95</span>
        <span class="na">WIDTH</span><span class="pi">:</span> <span class="m">150</span>
        <span class="na">HEIGHT</span><span class="pi">:</span> <span class="m">10</span>
        <span class="na">MIN_VALUE</span><span class="pi">:</span> <span class="m">0</span>
        <span class="na">MAX_VALUE</span><span class="pi">:</span> <span class="m">100</span>
        <span class="na">BAR_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BAR_OUTLINE</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">BAR_OUTLINE_COLOR</span><span class="pi">:</span> <span class="s">255, 50, </span><span class="m">0</span>
        <span class="na">BACKGROUND_COLOR</span><span class="pi">:</span> <span class="s">0, 0, </span><span class="m">0</span>

<span class="c1">### ... 후략 ... ###</span>
</code></pre></div></div>

<h5 id="4-파이썬-코드-커스텀">4. 파이썬 코드 커스텀</h5>

<p>theme.yaml을 읽어 파이썬 코드로 필요한 정보를 빼오는 식이다.<br />
코드를 수정하면 원하는 정보를 다양하게 가져올 수 있다는 것.</p>

<p>우선 기본 테두리 설정이 너무 얇아서 테두리를 굵게 해준다.<br />
수정 대상 파일은 <span style="color: orange;"><strong>turing-smart-screen-python\library\lcd\lcd_comm.py</strong></span></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">bar_outline</span><span class="p">:</span>
    <span class="c1"># Draw outline
</span>    <span class="c1"># 테두리 두께 추가
</span>    <span class="n">outline_width</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">draw</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">width</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">height</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">fill</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">bar_color</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">outline_width</span><span class="p">)</span>
</code></pre></div></div>

<p><span style="color: orange;"><strong>turing-smart-screen-python\library\stats.py</strong></span><br />
main.py 실행 시 스케쥴러를 통해 stats.py 를 주기적으로 호출한다.<br />
각 센서 데이터를 수집하니 가장 커스텀할게 많은 셈이다.</p>

<p>하나하나 커스텀하자면 끝도 없을텐데 최대한 쓸 수 있는 기능은 그대로 가져다 쓰고싶기 때문에 최소한의 커스텀을 해보자.<br />
yaml 만드는 것으로 이미 지쳤다.</p>

<p>우선 모든 CPU 코어를 한 눈에 볼 수 있게 코어 정보를 가져온다.<br />
CPU 클래스에 코어 확인 함수를 추가하고 퍼센티지 호출하는 부분 하단에 코어 확인 함수를 추가한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@classmethod</span>
<span class="k">def</span> <span class="nf">percentage</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
    <span class="n">theme_data</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">THEME_DATA</span><span class="p">[</span><span class="sh">'</span><span class="s">STATS</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">CPU</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">PERCENTAGE</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">cpu_percentage</span> <span class="o">=</span> <span class="n">sensors</span><span class="p">.</span><span class="n">Cpu</span><span class="p">.</span><span class="nf">percentage</span><span class="p">(</span>
        <span class="n">interval</span><span class="o">=</span><span class="n">theme_data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">INTERVAL</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="nf">save_last_value</span><span class="p">(</span><span class="n">cpu_percentage</span><span class="p">,</span> <span class="n">cls</span><span class="p">.</span><span class="n">last_values_cpu_percentage</span><span class="p">,</span>
                    <span class="n">theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">LINE_GRAPH</span><span class="sh">'</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">HISTORY_SIZE</span><span class="sh">"</span><span class="p">,</span> <span class="n">DEFAULT_HISTORY_SIZE</span><span class="p">))</span>
    <span class="c1"># logger.debug(f"CPU Percentage: {cpu_percentage}")
</span>
    <span class="nf">display_themed_progress_bar</span><span class="p">(</span><span class="n">theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">cpu_percentage</span><span class="p">)</span>
    <span class="nf">display_themed_percent_radial_bar</span><span class="p">(</span><span class="n">theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">RADIAL</span><span class="sh">'</span><span class="p">],</span> <span class="n">cpu_percentage</span><span class="p">)</span>
    <span class="nf">display_themed_percent_value</span><span class="p">(</span><span class="n">theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">TEXT</span><span class="sh">'</span><span class="p">],</span> <span class="n">cpu_percentage</span><span class="p">)</span>
    <span class="nf">display_themed_line_graph</span><span class="p">(</span><span class="n">theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">LINE_GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">cls</span><span class="p">.</span><span class="n">last_values_cpu_percentage</span><span class="p">)</span>

    <span class="c1"># 코어 확인 함수
</span>    <span class="n">CPU</span><span class="p">.</span><span class="nf">core_percentages</span><span class="p">()</span>

<span class="c1">### ... 중략 ...
</span>
<span class="c1"># 코어 확인 위한 함수
</span><span class="nd">@classmethod</span>
<span class="k">def</span> <span class="nf">core_percentages</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
    <span class="c1"># theme.yaml에 정의된 코어별 항목을 자동으로 순회
</span>    <span class="n">cpu_theme</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">THEME_DATA</span><span class="p">[</span><span class="sh">'</span><span class="s">STATS</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">CPU</span><span class="sh">'</span><span class="p">]</span>

    <span class="kn">import</span> <span class="n">psutil</span>
    <span class="n">core_percents</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="nf">cpu_percent</span><span class="p">(</span><span class="n">percpu</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">percent</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">core_percents</span><span class="p">):</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">CORE_</span><span class="si">{</span><span class="n">idx</span><span class="si">}</span><span class="sh">'</span>
        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">cpu_theme</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">cpu_theme</span><span class="p">[</span><span class="n">key</span><span class="p">]:</span>
            <span class="nf">display_themed_progress_bar</span><span class="p">(</span><span class="n">cpu_theme</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">percent</span><span class="p">)</span>
</code></pre></div></div>

<p>디스크의 경우는 C, D, E 드라이브를 사용 중인데<br />
각각 드라이브 사용량을 보여주기 위해 커스텀한다.</p>

<p>기존 코드는 단일 디스크의 사용량, 남은용량 등의 정보를 가져오는데<br />
나는 3개의 사용량만 확인하면 되기 때문에 전체 주석 처리 후 아래 코드로 사용량만 확인하게끔 바꿔주었다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@classmethod</span>
<span class="k">def</span> <span class="nf">stats</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
    <span class="kn">import</span> <span class="n">psutil</span>
    <span class="n">disk_theme_data</span> <span class="o">=</span> <span class="n">config</span><span class="p">.</span><span class="n">THEME_DATA</span><span class="p">[</span><span class="sh">'</span><span class="s">STATS</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">DISK</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># C 드라이브
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">c_usage</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="nf">disk_usage</span><span class="p">(</span><span class="sh">'</span><span class="s">C:/</span><span class="sh">'</span><span class="p">).</span><span class="n">percent</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">c_usage</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nf">display_themed_progress_bar</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">c_usage</span><span class="p">)</span>
    <span class="nf">display_themed_percent_value</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">TEXT</span><span class="sh">'</span><span class="p">],</span> <span class="n">c_usage</span><span class="p">)</span>

    <span class="c1"># D 드라이브
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">d_usage</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="nf">disk_usage</span><span class="p">(</span><span class="sh">'</span><span class="s">D:/</span><span class="sh">'</span><span class="p">).</span><span class="n">percent</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">d_usage</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nf">display_themed_progress_bar</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">D</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">d_usage</span><span class="p">)</span>
    <span class="nf">display_themed_percent_value</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">D</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">TEXT</span><span class="sh">'</span><span class="p">],</span> <span class="n">d_usage</span><span class="p">)</span>

    <span class="c1"># E 드라이브 
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">e_usage</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="nf">disk_usage</span><span class="p">(</span><span class="sh">'</span><span class="s">E:/</span><span class="sh">'</span><span class="p">).</span><span class="n">percent</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">e_usage</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="nf">display_themed_progress_bar</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">GRAPH</span><span class="sh">'</span><span class="p">],</span> <span class="n">e_usage</span><span class="p">)</span>
    <span class="nf">display_themed_percent_value</span><span class="p">(</span><span class="n">disk_theme_data</span><span class="p">[</span><span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">TEXT</span><span class="sh">'</span><span class="p">],</span> <span class="n">e_usage</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-10-Hardware Monitor/img06.webp" alt="img06" /></p>

<p>딱 내가 필요한 정보만 쑤셔박았다<br />
음 투박해 기능적이야</p>

<p>자동 실행을 위해 작업 스케쥴러에 등록하고<br />
깔끔하게 보이기 위해 어항 케이스 안으로 쑤셔박으면 된다.</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>cpu나 보드, 그래픽카드 제품 명도 넣는게 좋을까? 생각했는데<br />
별로 기능적으로 의미가 없을 것 같다.</p>

<p>AI에 적당히 깔끔하게 백그라운드 만들어달라하고 거기에 맞추면 더 보기 좋을 것 같기도 하고…<br />
일단은 이대로 써보고 질리는 날이 오면 추가 커스텀 들어가야겠다.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p>파이썬 코드는 위 내용이 전부기 때문에 theme.yaml만 업로드</p>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/one-pan/Python/2025-06-10-Hardware%20Monitor-theme.yaml">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="one-pan/Python/" /><summary type="html"><![CDATA[개요 알리에서 3.5인치 모니터를 주웠다. 온도 체크하기가 불편해서 사봤는데 리소스 사용량도 보여주고 상당히 괜찮다. 제조사에서 드라이버를 제공해서 예쁜 테마를 가져다 그대로 쓸 수 있는데 다소 불안한 감이 있고 이런 건 또 직접해야 제맛이다. 필요없는 정보는 지우고 감성보다 기능성에 초점을 맞춘 새로운 테마를 만든다. 설계 turing-smart-screen-python 이 오픈소스 프로젝트는 소형 시스템 모니터에 각종 정보를 보기 좋게 표시해주는 프로그램이다. 능력자들이 밥을 다 차려놨으니 나는 숟가락만 들면 되는 것이다. 소스코드를 다운로드 해 필요한 부분만 커스텀하고 사용할 수 있도록 하자. 내게 필요한 정보는 CPU, GPU 온도 CPU 전체, 코어 별 사용량 GPU, VRAM 사용량 RAM 사용량 디스크 사용량 필요 없는 정보는 날짜 날씨 네트워크 사용량 업타임 아니 진짜 날짜 날씨는 왜 있지? 메인 모니터나 휴대폰이 훨씬 잘 알려주는데 커스텀 1. 설치 파이썬만 있으면 설치는 간편하다. pip install -r requirements.txt pip 의존성 설치 후 실행하면 켜진다. 바로 실행하려면 main.py를, 설정 창을 띄우려면 configure.py를 실행한다. python configure.py 2. 커스텀 테마 생성 테마 파일은 turing-smart-screen-python\res\themes 폴더에 위치해있다. MyCustomTheme 폴더를 생성하고 내부에 theme.yaml 파일을 생성한다. 구매한 3.5인치 모니터의 자체 프로그램 테마는 좀 다양한게 많아서 참고하려했더니 .data 파일로 되어있어서 그냥 포기하고 새로 만들기로 한다. 3.5인치 모니터의 크기는 480 X 320 이고 배경은 검은색으로 만들거라 그림판으로 검은색 사진을 만들어 background.png 로 넣어준다. 뭐 없으면 알아서 까만화면 될 줄 알았는데 오류 나더라… yaml 수정은 즉각 반영되니 테마 에디터를 띄어두고 yaml을 수정하며 맞추면 된다. python theme-editor.py MyCustomTheme 3. yaml 작성 기본적으로 yaml만 잘 작성해주면 해당 정보들을 알아서 가져온다. 디폴트 테마를 예시로 삼아서 잘 작성해보자. CPU와 디스크 쪽은 커스텀이 들어가야해서 머리아프다. 갱신은 디스크 제외 1초로 통일했다. 1초 마다 사용량을 갱신할 의미가 있을까 싶어서 60초로 설정했다. display: DISPLAY_SIZE: "3.5\"" DISPLAY_ORIENTATION: "landscape" DISPLAY_REVERSE: true DISPLAY_RGB_LED: "0, 0, 0" static_images: BACKGROUND: PATH: background.png X: 0 Y: 0 WIDTH: 480 HEIGHT: 320 STATS: CPU: PERCENTAGE: INTERVAL: 1 TEXT: SHOW: true X: 70 Y: 20 FONT: "jetbrains-mono/JetBrainsMono-Bold.ttf" FONT_SIZE: 22 FONT_COLOR: "255, 50, 0" BACKGROUND_COLOR: 0, 0, 0 GRAPH: SHOW: true X: 20 Y: 50 WIDTH: 200 HEIGHT: 20 MIN_VALUE: 0 MAX_VALUE: 100 BAR_COLOR: 255, 50, 0 BAR_OUTLINE: true BAR_OUTLINE_COLOR: 255, 50, 0 BACKGROUND_COLOR: 0, 0, 0 TEMPERATURE: INTERVAL: 1 TEXT: SHOW: true X: 155 Y: 20 FONT: "jetbrains-mono/JetBrainsMono-Bold.ttf" FONT_SIZE: 22 FONT_COLOR: "255, 50, 0" BACKGROUND_COLOR: 0, 0, 0 CORE_0: GRAPH: SHOW: true X: 70 Y: 80 WIDTH: 150 HEIGHT: 10 MIN_VALUE: 0 MAX_VALUE: 100 BAR_COLOR: 255, 50, 0 BAR_OUTLINE: true BAR_OUTLINE_COLOR: 255, 50, 0 BACKGROUND_COLOR: 0, 0, 0 CORE_1: GRAPH: SHOW: true X: 70 Y: 95 WIDTH: 150 HEIGHT: 10 MIN_VALUE: 0 MAX_VALUE: 100 BAR_COLOR: 255, 50, 0 BAR_OUTLINE: true BAR_OUTLINE_COLOR: 255, 50, 0 BACKGROUND_COLOR: 0, 0, 0 ### ... 후략 ... ### 4. 파이썬 코드 커스텀 theme.yaml을 읽어 파이썬 코드로 필요한 정보를 빼오는 식이다. 코드를 수정하면 원하는 정보를 다양하게 가져올 수 있다는 것. 우선 기본 테두리 설정이 너무 얇아서 테두리를 굵게 해준다. 수정 대상 파일은 turing-smart-screen-python\library\lcd\lcd_comm.py if bar_outline: # Draw outline # 테두리 두께 추가 outline_width = 3 draw.rectangle([0, 0, width - 1, height - 1], fill=None, outline=bar_color, width=outline_width) turing-smart-screen-python\library\stats.py main.py 실행 시 스케쥴러를 통해 stats.py 를 주기적으로 호출한다. 각 센서 데이터를 수집하니 가장 커스텀할게 많은 셈이다. 하나하나 커스텀하자면 끝도 없을텐데 최대한 쓸 수 있는 기능은 그대로 가져다 쓰고싶기 때문에 최소한의 커스텀을 해보자. yaml 만드는 것으로 이미 지쳤다. 우선 모든 CPU 코어를 한 눈에 볼 수 있게 코어 정보를 가져온다. CPU 클래스에 코어 확인 함수를 추가하고 퍼센티지 호출하는 부분 하단에 코어 확인 함수를 추가한다. @classmethod def percentage(cls): theme_data = config.THEME_DATA['STATS']['CPU']['PERCENTAGE'] cpu_percentage = sensors.Cpu.percentage( interval=theme_data.get("INTERVAL", None) ) save_last_value(cpu_percentage, cls.last_values_cpu_percentage, theme_data['LINE_GRAPH'].get("HISTORY_SIZE", DEFAULT_HISTORY_SIZE)) # logger.debug(f"CPU Percentage: {cpu_percentage}") display_themed_progress_bar(theme_data['GRAPH'], cpu_percentage) display_themed_percent_radial_bar(theme_data['RADIAL'], cpu_percentage) display_themed_percent_value(theme_data['TEXT'], cpu_percentage) display_themed_line_graph(theme_data['LINE_GRAPH'], cls.last_values_cpu_percentage) # 코어 확인 함수 CPU.core_percentages() ### ... 중략 ... # 코어 확인 위한 함수 @classmethod def core_percentages(cls): # theme.yaml에 정의된 코어별 항목을 자동으로 순회 cpu_theme = config.THEME_DATA['STATS']['CPU'] import psutil core_percents = psutil.cpu_percent(percpu=True) for idx, percent in enumerate(core_percents): key = f'CORE_{idx}' if key in cpu_theme and 'GRAPH' in cpu_theme[key]: display_themed_progress_bar(cpu_theme[key]['GRAPH'], percent) 디스크의 경우는 C, D, E 드라이브를 사용 중인데 각각 드라이브 사용량을 보여주기 위해 커스텀한다. 기존 코드는 단일 디스크의 사용량, 남은용량 등의 정보를 가져오는데 나는 3개의 사용량만 확인하면 되기 때문에 전체 주석 처리 후 아래 코드로 사용량만 확인하게끔 바꿔주었다. @classmethod def stats(cls): import psutil disk_theme_data = config.THEME_DATA['STATS']['DISK'] # C 드라이브 try: c_usage = psutil.disk_usage('C:/').percent except Exception: c_usage = 0 display_themed_progress_bar(disk_theme_data['C']['GRAPH'], c_usage) display_themed_percent_value(disk_theme_data['C']['TEXT'], c_usage) # D 드라이브 try: d_usage = psutil.disk_usage('D:/').percent except Exception: d_usage = 0 display_themed_progress_bar(disk_theme_data['D']['GRAPH'], d_usage) display_themed_percent_value(disk_theme_data['D']['TEXT'], d_usage) # E 드라이브 try: e_usage = psutil.disk_usage('E:/').percent except Exception: e_usage = 0 display_themed_progress_bar(disk_theme_data['E']['GRAPH'], e_usage) display_themed_percent_value(disk_theme_data['E']['TEXT'], e_usage) 완성 딱 내가 필요한 정보만 쑤셔박았다 음 투박해 기능적이야 자동 실행을 위해 작업 스케쥴러에 등록하고 깔끔하게 보이기 위해 어항 케이스 안으로 쑤셔박으면 된다. 반성 cpu나 보드, 그래픽카드 제품 명도 넣는게 좋을까? 생각했는데 별로 기능적으로 의미가 없을 것 같다. AI에 적당히 깔끔하게 백그라운드 만들어달라하고 거기에 맞추면 더 보기 좋을 것 같기도 하고… 일단은 이대로 써보고 질리는 날이 오면 추가 커스텀 들어가야겠다. 코드 확인 파이썬 코드는 위 내용이 전부기 때문에 theme.yaml만 업로드 Link to GitHub]]></summary></entry><entry><title type="html">2784번 가로 세로 퍼즐</title><link href="https://movingwoo.com/random-solve/java/2025/06/04/2784.html" rel="alternate" type="text/html" title="2784번 가로 세로 퍼즐" /><published>2025-06-04T07:00:00+00:00</published><updated>2025-06-04T07:00:00+00:00</updated><id>https://movingwoo.com/random-solve/java/2025/06/04/2784</id><content type="html" xml:base="https://movingwoo.com/random-solve/java/2025/06/04/2784.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-04-2784/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/2784">2784번 가로 세로 퍼즐 - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><span style="color: orange;"><strong>개똥아</strong></span><br />
<span style="color: orange;"><strong>똥쌌니</strong></span><br />
<span style="color: orange;"><strong>아니오</strong></span><br />
를 만드는 문제</p>

<p>생각보다… 조건이 복잡한건가?
일단 모든 단어 6개가 들어가야하니 중복 체크가 필요하고<br />
출력 시 사전순으로 앞서는 것을 출력하라고 되어있는데<br />
가로3개-&gt;세로3개 순으로 사전순인가? 가로-&gt;세로-&gt;가로-&gt;세로-&gt;가로-&gt;세로 순인가?<br />
도통 알 수 없다.</p>

<p>단어 6개 밖에 안들어오기 때문에 하나씩 넣으면서 시뮬레이션 돌려보면 되려나?<br />
대충 하나하나 다 갖다박아보자.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-세로-단어-추출">1. 세로 단어 추출</h5>

<p>일단 사전 순서대로 들어온다고 하니 i, j, k 인덱스를 잡아서 순서대로 가로로 배치한다.<br />
그리고 세로 단어를 뽑아서 존재하는 단어인지 확인한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">6</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">6</span> <span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">k</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			
			<span class="nc">String</span> <span class="n">horizontalWord1</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="nc">String</span> <span class="n">horizontalWord2</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
			<span class="nc">String</span> <span class="n">horizontalWord3</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
			
			<span class="c1">// 만든 단어</span>
			<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">used</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
			
			<span class="kt">int</span> <span class="n">putCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="c1">// 세로 줄 단어 생성</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">;</span> <span class="n">l</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">String</span> <span class="n">verticalWord</span> <span class="o">=</span> <span class="s">""</span> <span class="o">+</span> <span class="n">horizontalWord1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">l</span><span class="o">)</span> <span class="o">+</span> <span class="n">horizontalWord2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">l</span><span class="o">)</span> <span class="o">+</span> <span class="n">horizontalWord3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
				
				<span class="c1">// 세로단어가 존재하지 않는 단어면 통과</span>
				<span class="k">if</span> <span class="o">(!</span><span class="n">words</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">verticalWord</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>
				
				<span class="n">used</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">verticalWord</span><span class="o">,</span> <span class="n">used</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">verticalWord</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
				<span class="n">putCount</span><span class="o">++;</span>
			<span class="o">}</span>
			
			<span class="c1">// 3번 안넣었으면 굳이 더 볼 필요 없음</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">putCount</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-단어가-모이면-비교">2. 단어가 모이면 비교</h5>

<p>입력으로 중복이 들어올 수 있어서 Set은 사용하면 안된다.<br />
입력 받을때 단어 사용 횟수를 저장하는 Map을 만들고<br />
세로단어 생성 후 나온 퍼즐의 Map과 비교해 유효한지 판단한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">words</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 비교 시 중복때문에 Set을 못써서 Map 사용</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">6</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">word</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
	<span class="n">words</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
	<span class="n">count</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">count</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// ... 중략 ...</span>

<span class="kt">boolean</span> <span class="n">valid</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="c1">// 비교</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">used</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">!=</span> <span class="n">count</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span> <span class="o">{</span>
		<span class="n">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
		<span class="k">break</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">horizontalWord1</span><span class="o">);</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">horizontalWord2</span><span class="o">);</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
	<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">horizontalWord3</span><span class="o">);</span>
	<span class="k">break</span> <span class="n">exit</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-04-2784/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>입력이 너무 적어서 아무 의미 없겠지만 생각해보자.<br />
이거 입력이 터져 나가는 경우엔 어떻게 풀어야하지?<br />
가로줄을 추가할 때마다 세로줄을 추출해서 접두사 검색을 해봐야하나?<br />
그럼 백트래킹 같은 걸 끼얹고 접두사 검색을 위해 트라이를 써야하는건가…<br />
이거 굉장히 곤란한 문제가 될 수 있겠다.<br />
에잇 끔찍한 소리 치워 꼴도 보기 싫어</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-04-2784.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/Java/" /><summary type="html"><![CDATA[문제 2784번 가로 세로 퍼즐 - 백준 설계 개똥아 똥쌌니 아니오 를 만드는 문제 생각보다… 조건이 복잡한건가? 일단 모든 단어 6개가 들어가야하니 중복 체크가 필요하고 출력 시 사전순으로 앞서는 것을 출력하라고 되어있는데 가로3개-&gt;세로3개 순으로 사전순인가? 가로-&gt;세로-&gt;가로-&gt;세로-&gt;가로-&gt;세로 순인가? 도통 알 수 없다. 단어 6개 밖에 안들어오기 때문에 하나씩 넣으면서 시뮬레이션 돌려보면 되려나? 대충 하나하나 다 갖다박아보자. 구현 1. 세로 단어 추출 일단 사전 순서대로 들어온다고 하니 i, j, k 인덱스를 잡아서 순서대로 가로로 배치한다. 그리고 세로 단어를 뽑아서 존재하는 단어인지 확인한다. for (int i = 0 ; i &lt; 6 ; i++) { for (int j = 0 ; j &lt; 6 ; j++) { if (i == j) continue; for (int k = 0 ; k &lt; 6 ; k++) { if (i == k || j == k) continue; String horizontalWord1 = words.get(i); String horizontalWord2 = words.get(j); String horizontalWord3 = words.get(k); // 만든 단어 Map&lt;String, Integer&gt; used = new HashMap&lt;&gt;(); int putCount = 0; // 세로 줄 단어 생성 for (int l = 0 ; l &lt; 3 ; l++) { String verticalWord = "" + horizontalWord1.charAt(l) + horizontalWord2.charAt(l) + horizontalWord3.charAt(l); // 세로단어가 존재하지 않는 단어면 통과 if (!words.contains(verticalWord)) break; used.put(verticalWord, used.getOrDefault(verticalWord, 0) + 1); putCount++; } // 3번 안넣었으면 굳이 더 볼 필요 없음 if (putCount &lt; 3) continue; } } } 2. 단어가 모이면 비교 입력으로 중복이 들어올 수 있어서 Set은 사용하면 안된다. 입력 받을때 단어 사용 횟수를 저장하는 Map을 만들고 세로단어 생성 후 나온 퍼즐의 Map과 비교해 유효한지 판단한다. List&lt;String&gt; words = new ArrayList&lt;&gt;(); // 비교 시 중복때문에 Set을 못써서 Map 사용 Map&lt;String, Integer&gt; count = new HashMap&lt;&gt;(); for (int i = 0 ; i &lt; 6 ; i++) { String word = br.readLine(); words.add(word); count.put(word, count.getOrDefault(word, 0) + 1); } // ... 중략 ... boolean valid = true; // 비교 for (Map.Entry&lt;String, Integer&gt; entry : used.entrySet()) { if (entry.getValue() != count.get(entry.getKey())) { valid = false; break; } } if (valid) { result = true; bw.write(horizontalWord1); bw.write("\n"); bw.write(horizontalWord2); bw.write("\n"); bw.write(horizontalWord3); break exit; } 채점 반성 입력이 너무 적어서 아무 의미 없겠지만 생각해보자. 이거 입력이 터져 나가는 경우엔 어떻게 풀어야하지? 가로줄을 추가할 때마다 세로줄을 추출해서 접두사 검색을 해봐야하나? 그럼 백트래킹 같은 걸 끼얹고 접두사 검색을 위해 트라이를 써야하는건가… 이거 굉장히 곤란한 문제가 될 수 있겠다. 에잇 끔찍한 소리 치워 꼴도 보기 싫어 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">4676번 Haiku Review</title><link href="https://movingwoo.com/random-solve/python/2025/06/04/4676.html" rel="alternate" type="text/html" title="4676번 Haiku Review" /><published>2025-06-04T05:00:00+00:00</published><updated>2025-06-04T05:00:00+00:00</updated><id>https://movingwoo.com/random-solve/python/2025/06/04/4676</id><content type="html" xml:base="https://movingwoo.com/random-solve/python/2025/06/04/4676.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-04-4676/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/4676">4676번 Haiku Review - 백준</a></p>

<blockquote>
  <h4 id="번역">번역</h4>
  <hr />
</blockquote>

<p>하이쿠는 5/7/5 조의 일본 시다.<br />
입력을 받아 하이쿠가 맞다면 Y 아니라면 잘못된 행의 숫자를 출력하시오.</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><span style="color: orange;"><strong>a, e, i, o, u, y</strong></span> 6개를 모음으로 치며 모음이 붙어있는 경우에는 1음절로 친다.</p>

<p>예제의 경우를 확인해보면<br />
h<span style="color: orange;"><strong>a</strong></span>pp<span style="color: orange;"><strong>y</strong></span> p<span style="color: orange;"><strong>u</strong></span>rpl<span style="color: orange;"><strong>e</strong></span> fr<span style="color: orange;"><strong>o</strong></span>g<br />
<span style="color: orange;"><strong>ea</strong></span>t<span style="color: orange;"><strong>i</strong></span>ng b<span style="color: orange;"><strong>u</strong></span>gs <span style="color: orange;"><strong>i</strong></span>n th<span style="color: orange;"><strong>e</strong></span> m<span style="color: orange;"><strong>a</strong></span>rsh<span style="color: orange;"><strong>e</strong></span>s<br />
g<span style="color: orange;"><strong>e</strong></span>t <span style="color: orange;"><strong>i</strong></span>nd<span style="color: orange;"><strong>i</strong></span>g<span style="color: orange;"><strong>e</strong></span>sti<span style="color: orange;"><strong>o</strong></span>n</p>

<p>그래서 Y로 볼 수 있다.</p>

<p>아니 이거 정규식 짜면 한 방 아닌가?</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<p>정규식은 <span style="color: orange;"><strong>[aeiouy]+</strong></span> 을 사용한다.<br />
aeiouy 중 하나 이상(+)의 연속된 그룹을 찾는 정규식이다.</p>

<p>자동으로 찾아주니 분기만 잘 태워주면 끝</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">haikus</span> <span class="o">=</span> <span class="nf">input</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">haikus</span> <span class="o">==</span> <span class="sh">'</span><span class="s">e/o/i</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">break</span>

    <span class="n">haiku</span> <span class="o">=</span> <span class="n">haikus</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">jo</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
    <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">[aeiouy]+</span><span class="sh">'</span><span class="p">,</span> <span class="n">haiku</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">!=</span> <span class="n">jo</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Y</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Python/2025-06-04-4676/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>예전에 정규식으로 XSS 방지 스크립트 짜던 기억이 떠오른다.<br />
힘들었는데 진짜…</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Python/2025-06-04-4676.py">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/Python/" /><summary type="html"><![CDATA[문제 4676번 Haiku Review - 백준 번역 하이쿠는 5/7/5 조의 일본 시다. 입력을 받아 하이쿠가 맞다면 Y 아니라면 잘못된 행의 숫자를 출력하시오. 설계 a, e, i, o, u, y 6개를 모음으로 치며 모음이 붙어있는 경우에는 1음절로 친다. 예제의 경우를 확인해보면 happy purple frog eating bugs in the marshes get indigestion 그래서 Y로 볼 수 있다. 아니 이거 정규식 짜면 한 방 아닌가? 구현 정규식은 [aeiouy]+ 을 사용한다. aeiouy 중 하나 이상(+)의 연속된 그룹을 찾는 정규식이다. 자동으로 찾아주니 분기만 잘 태워주면 끝 import re while True: haikus = input().strip() if haikus == 'e/o/i': break haiku = haikus.split('/') jo = [5, 7, 5] result = 1; for i in range(3): if len(re.findall(r'[aeiouy]+', haiku[i])) != jo[i]: print(result) break result += 1 if result == 4: print('Y') 채점 반성 예전에 정규식으로 XSS 방지 스크립트 짜던 기억이 떠오른다. 힘들었는데 진짜… 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">WebP 변환기</title><link href="https://movingwoo.com/one-pan/python/2025/06/04/WebP-Converter.html" rel="alternate" type="text/html" title="WebP 변환기" /><published>2025-06-04T02:00:00+00:00</published><updated>2025-06-04T02:00:00+00:00</updated><id>https://movingwoo.com/one-pan/python/2025/06/04/WebP%20Converter</id><content type="html" xml:base="https://movingwoo.com/one-pan/python/2025/06/04/WebP-Converter.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p>jpg는 화질을 제법 깎아먹어서 용량이 가벼운 편이다.<br />
하지만 지난 포스트를 작성하며 이미지를 더 가볍게 유지할 필요성을 느꼈고<br />
<span style="color: orange;"><strong>webp</strong></span>로 변환하는게 좋겠다는 결론에 도달했다.</p>

<p>그러면 WebP 변환기를 만들어야겠지!!!</p>

<p>변환하며 화질을 살짝 열화시키면 더 효과가 좋을 것이다.<br />
뭐 영화 보는 것도 아니고 고화질 유지할 필요는 없으니</p>

<p>파이썬을 선택한 이유는 간단하다.<br />
딸깍 한 번 하면 필요한 라이브러리가 설치되니까.</p>

<p>자바로 하면 TwelveMonkeys 같은 외부 라이브러리 끌어와야하고<br />
C++하면 libwebp 빌드부터가 귀찮다.</p>

<p>편하게 쓰려고 내가 파이썬을 배웠지</p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p>webp로 변환할 타겟 폴더를 선택하는게 좋나, 타겟 이미지가 있는 폴더에 소스코드를 넣어두고 실행시키는게 좋나?<br />
고민 끝에 더 생각없이 쓰려면 후자가 쉽고 빠를 것 같아 후자로 한다.</p>

<p>현재 폴더의 모든 이미지를 타겟 폴더에 webp로 뱉어내도록 한다.</p>

<p>하는 김에 용량 얼마나 줄였는지 디스플레이도 해주면 좋겠다.</p>

<blockquote>
  <h4 id="구현-포인트">구현 포인트</h4>
  <hr />
</blockquote>

<p><span style="color: orange;"><strong>Pillow</strong></span> 라이브러리를 사용한다.</p>

<h5 id="1-기초-코드">1. 기초 코드</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="c1"># 실행 경로
</span><span class="n">folder</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getcwd</span><span class="p">()</span>

<span class="c1"># 폴더 내 파일들을 대상으로 변환
</span><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">):</span>
    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
    <span class="n">webp_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">splitext</span><span class="p">(</span><span class="n">img_path</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.webp</span><span class="sh">"</span>
    <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">).</span><span class="nf">save</span><span class="p">(</span><span class="n">webp_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">WEBP</span><span class="sh">"</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span> <span class="c1"># 80% 품질
</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">변환 완료</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h5 id="2-세부-설정">2. 세부 설정</h5>

<p>예외처리를 위해 이미지 확장자를 제한한다.<br />
jpg와 png, gif 3종류면 되겠지 뭐.</p>

<p>그리고 변환 전후로 용량을 확인해 print 시 표시해준다.</p>

<p>gif 파일은 그냥 변환하면 애니메이션이 사라지므로 따로 분기를 태워준다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># jpg, png, gif
</span><span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">endswith</span><span class="p">((</span><span class="sh">"</span><span class="s">.jpg</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.jpeg</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.png</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.gif</span><span class="sh">"</span><span class="p">)):</span>
    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
    <span class="n">webp_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">target_folder</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">splitext</span><span class="p">(</span><span class="n">filename</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.webp</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">img</span><span class="p">:</span>
        <span class="c1"># gif는 애니메이션 때문에 특수 처리
</span>        <span class="k">if</span> <span class="n">img</span><span class="p">.</span><span class="nb">format</span> <span class="o">==</span> <span class="sh">"</span><span class="s">GIF</span><span class="sh">"</span> <span class="ow">and</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="sh">"</span><span class="s">is_animated</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
            <span class="n">frames</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">durations</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="c1"># 그냥 변환하면 너무 느려서 duration 직접 추출
</span>            <span class="k">for</span> <span class="n">frame</span> <span class="ow">in</span> <span class="n">ImageSequence</span><span class="p">.</span><span class="nc">Iterator</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
                <span class="n">frames</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="nf">copy</span><span class="p">())</span>
                <span class="n">durations</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">duration</span><span class="sh">"</span><span class="p">,</span> <span class="mi">100</span><span class="p">))</span> 

            <span class="n">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">save</span><span class="p">(</span>
                <span class="n">webp_path</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">WEBP</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">save_all</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">append_images</span><span class="o">=</span><span class="n">frames</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span>
                <span class="n">duration</span><span class="o">=</span><span class="n">durations</span><span class="p">,</span>
                <span class="n">loop</span><span class="o">=</span><span class="n">img</span><span class="p">.</span><span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">loop</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                <span class="n">quality</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="c1"># 애니메이션 없으면 그냥 변환
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">img</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">webp_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">WEBP</span><span class="sh">"</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>

    <span class="c1"># 용량 확인 (kb)
</span>    <span class="n">before_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1024</span>
    <span class="n">after_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">webp_path</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1024</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s"> 변환 완료</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">after_size</span> <span class="o">&gt;</span> <span class="n">before_size</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">↑↑증가↑↑ </span><span class="si">{</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">before_size</span> <span class="o">/</span> <span class="n">after_size</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">% (</span><span class="si">{</span><span class="n">before_size</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">kb -&gt; </span><span class="si">{</span><span class="n">after_size</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">kb)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">↓↓감소↓↓ </span><span class="si">{</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">after_size</span> <span class="o">/</span> <span class="n">before_size</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">% (</span><span class="si">{</span><span class="n">before_size</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">kb -&gt; </span><span class="si">{</span><span class="n">after_size</span><span class="si">:</span><span class="p">.</span><span class="mi">1</span><span class="n">f</span><span class="si">}</span><span class="s">kb)</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p>테스트 이미지 파일 몇개 넣어놓고 돌려보았다.</p>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-04-WebP Converter/img01.webp" alt="img01" /></p>

<p><span style="color: red;"><strong>gif는 용량이 오히려 늘어날 수 있다!!!</strong></span><br />
변환해보고 webp가 오히려 용량이 많은 경우 gif를 그대로 써야겠다.</p>

<p>늘어난 파일 제외하고 테스트 이미지 파일 압축 시 용량변화는 아래와 같다.</p>

<p><img src="/assets/images/posts/one-pan/Python/2025-06-04-WebP Converter/img02.webp" alt="img02" /></p>

<p><span style="color: orange;"><strong>18.1mb에서 4.51mb로 줄였으니 75% 가량 줄인 셈이다!!!</strong></span><br />
홀리 지져스 크라이스트</p>

<p>이제 그동안 올린 이미지 파일도 전체 용량 줄이기에 들어가자.<br />
쌓이면 답도 없으니 이미지가 하나라도 적은 지금 작업해야한다…</p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>더 발전 시킬 수 있을거란 마음이 계속 생긴다.<br />
하지만 이런건 적당히 끊어줘야한다.<br />
잘 돌아가고 목적을 달성했으면 됐지.<br />
여기서 칼같이 끊어야겠다.<br />
이것 말고도 할게 많단 말이야.</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/one-pan/Python/2025-06-04-WebP%20Converter.py">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="one-pan/Python/" /><summary type="html"><![CDATA[개요 jpg는 화질을 제법 깎아먹어서 용량이 가벼운 편이다. 하지만 지난 포스트를 작성하며 이미지를 더 가볍게 유지할 필요성을 느꼈고 webp로 변환하는게 좋겠다는 결론에 도달했다. 그러면 WebP 변환기를 만들어야겠지!!! 변환하며 화질을 살짝 열화시키면 더 효과가 좋을 것이다. 뭐 영화 보는 것도 아니고 고화질 유지할 필요는 없으니 파이썬을 선택한 이유는 간단하다. 딸깍 한 번 하면 필요한 라이브러리가 설치되니까. 자바로 하면 TwelveMonkeys 같은 외부 라이브러리 끌어와야하고 C++하면 libwebp 빌드부터가 귀찮다. 편하게 쓰려고 내가 파이썬을 배웠지 설계 webp로 변환할 타겟 폴더를 선택하는게 좋나, 타겟 이미지가 있는 폴더에 소스코드를 넣어두고 실행시키는게 좋나? 고민 끝에 더 생각없이 쓰려면 후자가 쉽고 빠를 것 같아 후자로 한다. 현재 폴더의 모든 이미지를 타겟 폴더에 webp로 뱉어내도록 한다. 하는 김에 용량 얼마나 줄였는지 디스플레이도 해주면 좋겠다. 구현 포인트 Pillow 라이브러리를 사용한다. 1. 기초 코드 from PIL import Image import os # 실행 경로 folder = os.getcwd() # 폴더 내 파일들을 대상으로 변환 for filename in os.listdir(folder): img_path = os.path.join(folder, filename) webp_path = os.path.splitext(img_path)[0] + ".webp" Image.open(img_path).save(webp_path, "WEBP", quality=80) # 80% 품질 print("변환 완료") 2. 세부 설정 예외처리를 위해 이미지 확장자를 제한한다. jpg와 png, gif 3종류면 되겠지 뭐. 그리고 변환 전후로 용량을 확인해 print 시 표시해준다. gif 파일은 그냥 변환하면 애니메이션이 사라지므로 따로 분기를 태워준다. # jpg, png, gif if filename.lower().endswith((".jpg", ".jpeg", ".png", ".gif")): img_path = os.path.join(folder, filename) webp_path = os.path.join(target_folder, os.path.splitext(filename)[0] + ".webp") with Image.open(img_path) as img: # gif는 애니메이션 때문에 특수 처리 if img.format == "GIF" and getattr(img, "is_animated", False): frames = [] durations = [] # 그냥 변환하면 너무 느려서 duration 직접 추출 for frame in ImageSequence.Iterator(img): frames.append(frame.copy()) durations.append(frame.info.get("duration", 100)) frames[0].save( webp_path, "WEBP", save_all=True, append_images=frames[1:], duration=durations, loop=img.info.get("loop", 0), quality=80, ) # 애니메이션 없으면 그냥 변환 else: img.save(webp_path, "WEBP", quality=80) # 용량 확인 (kb) before_size = os.path.getsize(img_path) / 1024 after_size = os.path.getsize(webp_path) / 1024 print(f"{filename} 변환 완료") if after_size &gt; before_size: print(f"↑↑증가↑↑ {(1 - before_size / after_size) * 100:.1f}% ({before_size:.1f}kb -&gt; {after_size:.1f}kb)") else: print(f"↓↓감소↓↓ {(1 - after_size / before_size) * 100:.1f}% ({before_size:.1f}kb -&gt; {after_size:.1f}kb)") 완성 테스트 이미지 파일 몇개 넣어놓고 돌려보았다. gif는 용량이 오히려 늘어날 수 있다!!! 변환해보고 webp가 오히려 용량이 많은 경우 gif를 그대로 써야겠다. 늘어난 파일 제외하고 테스트 이미지 파일 압축 시 용량변화는 아래와 같다. 18.1mb에서 4.51mb로 줄였으니 75% 가량 줄인 셈이다!!! 홀리 지져스 크라이스트 이제 그동안 올린 이미지 파일도 전체 용량 줄이기에 들어가자. 쌓이면 답도 없으니 이미지가 하나라도 적은 지금 작업해야한다… 반성 더 발전 시킬 수 있을거란 마음이 계속 생긴다. 하지만 이런건 적당히 끊어줘야한다. 잘 돌아가고 목적을 달성했으면 됐지. 여기서 칼같이 끊어야겠다. 이것 말고도 할게 많단 말이야. 코드 확인 Link to GitHub]]></summary></entry><entry><title type="html">마법의 소라고둥</title><link href="https://movingwoo.com/one-pan/shortcuts/2025/06/02/Magic-Conch-Shell.html" rel="alternate" type="text/html" title="마법의 소라고둥" /><published>2025-06-02T08:00:00+00:00</published><updated>2025-06-02T08:00:00+00:00</updated><id>https://movingwoo.com/one-pan/shortcuts/2025/06/02/Magic%20Conch%20Shell</id><content type="html" xml:base="https://movingwoo.com/one-pan/shortcuts/2025/06/02/Magic-Conch-Shell.html"><![CDATA[<blockquote>
  <h4 id="개요">개요</h4>
  <hr />
</blockquote>

<p>심심하면 아이폰 단축어로 이것저것 만드는데 제법 재밌다</p>

<p>오늘은 스폰지밥 에피소드 중 하나인 <span style="color: orange;"><strong>마법의 소라고둥</strong></span>을 따라서<br />
질문에 랜덤으로 소라고둥이 답해주는걸 만들거다.</p>

<p>그런데 소라고동임 소라고둥임?<br />
애니메이션은 소라고동이라고 하고 표준어는 소라고둥이다.<br />
고민 끝에 표준어로 간다.</p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-사진-준비">1. 사진 준비</h5>

<p>뭐 외부 API 쓸 거 아니면 단축어 만드는 법은 상당히 단순한 편이다.<br />
조건문 블럭에만 잘 집어넣으면 돌아간다.</p>

<p>랜덤으로 사진 4장 중 하나를 보여줘야하니 소라고둥 사진 4장을 만든다.<br />
사진에 글자는 마크업 기능으로 그냥 쓰면 편하다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img01.webp" alt="img01" width="300" style="height: auto;" />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img02.webp" alt="img02" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img03.webp" alt="img03" width="300" style="height: auto;" />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img04.webp" alt="img04" width="300" style="height: auto;" /></p>

<h5 id="2-사용자-입력-받기">2. 사용자 입력 받기</h5>

<p>마법의 소라고둥님께 할 질문을 입력받는다.<br />
오오 고둥님…</p>

<p>물론 로직 상 질문은 그저 형식에 불과하다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img05.webp" alt="img05" width="300" style="height: auto;" /></p>

<h5 id="3-무작위-처리">3. 무작위 처리</h5>

<p>랜덤으로 사진 중 하나를 뽑아 보여준다.<br />
사진 이름을 magic_conch_1 부터 4까지 이름을 지어둬서<br />
무작위 숫자를 뽑아서 문자열 뒤에 붙여주고<br />
해당 이름을 가진 사진을 찾아서 보여준다.</p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img06.webp" alt="img06" width="300" style="height: auto;" /><br />
<img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img07.webp" alt="img07" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="완성">완성</h4>
  <hr />
</blockquote>

<p>고민이 될 때는 소라고둥님을 부르자.<br />
<span style="color: red;"><strong>마법의 소라고둥님! 이번 주는 진짜 로또가 될 수 있을까요?</strong></span></p>

<p><img src="/assets/images/posts/one-pan/Shortcuts/2025-06-02-Magic Conch Shell/img08.webp" alt="img08" width="300" style="height: auto;" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>단축어는 마크다운 파일 내 코드로 쓰기 마땅치 않다.<br />
json 형식으로 작성한다해도 알아보기가 힘들고<br />
결국 이미지 덕지덕지 붙이는 방법 외에 떠올리지 못했다.</p>

<p>실현 가능한지 몰라 테스트케이스로 이번 포스트를 작성해봤는데<br />
요 코딱지만한 단축어에 사진이 8개가 나왔다.</p>

<p>이미지 사용을 피할 수 없다면 이미지 사이즈를 줄이고 열화시켜 용량이라도 줄여봐야하나?</p>

<p>코드로 깃에 올려 공유하기 어려운 대신 단축어는 아이클라우드 공유가 가능한데<br />
소라고둥 단축어는 이미지를 따로 만들어서 공유해도 사용할 수 없다.</p>

<p>가능하면 쓸만한 놈 만든 경우엔 코드 공유 대신 단축어 자체를 공유하도록 해야겠다.</p>

<p>업로드 전 단축어 포스트 단점 하나 더 찾음<br />
소스코드가 없어서 포스트 내 글자수가 확 줄어들었다!</p>]]></content><author><name>movingwoo</name></author><category term="one-pan/Shortcuts/" /><summary type="html"><![CDATA[개요 심심하면 아이폰 단축어로 이것저것 만드는데 제법 재밌다 오늘은 스폰지밥 에피소드 중 하나인 마법의 소라고둥을 따라서 질문에 랜덤으로 소라고둥이 답해주는걸 만들거다. 그런데 소라고동임 소라고둥임? 애니메이션은 소라고동이라고 하고 표준어는 소라고둥이다. 고민 끝에 표준어로 간다. 구현 1. 사진 준비 뭐 외부 API 쓸 거 아니면 단축어 만드는 법은 상당히 단순한 편이다. 조건문 블럭에만 잘 집어넣으면 돌아간다. 랜덤으로 사진 4장 중 하나를 보여줘야하니 소라고둥 사진 4장을 만든다. 사진에 글자는 마크업 기능으로 그냥 쓰면 편하다. 2. 사용자 입력 받기 마법의 소라고둥님께 할 질문을 입력받는다. 오오 고둥님… 물론 로직 상 질문은 그저 형식에 불과하다. 3. 무작위 처리 랜덤으로 사진 중 하나를 뽑아 보여준다. 사진 이름을 magic_conch_1 부터 4까지 이름을 지어둬서 무작위 숫자를 뽑아서 문자열 뒤에 붙여주고 해당 이름을 가진 사진을 찾아서 보여준다. 완성 고민이 될 때는 소라고둥님을 부르자. 마법의 소라고둥님! 이번 주는 진짜 로또가 될 수 있을까요? 반성 단축어는 마크다운 파일 내 코드로 쓰기 마땅치 않다. json 형식으로 작성한다해도 알아보기가 힘들고 결국 이미지 덕지덕지 붙이는 방법 외에 떠올리지 못했다. 실현 가능한지 몰라 테스트케이스로 이번 포스트를 작성해봤는데 요 코딱지만한 단축어에 사진이 8개가 나왔다. 이미지 사용을 피할 수 없다면 이미지 사이즈를 줄이고 열화시켜 용량이라도 줄여봐야하나? 코드로 깃에 올려 공유하기 어려운 대신 단축어는 아이클라우드 공유가 가능한데 소라고둥 단축어는 이미지를 따로 만들어서 공유해도 사용할 수 없다. 가능하면 쓸만한 놈 만든 경우엔 코드 공유 대신 단축어 자체를 공유하도록 해야겠다. 업로드 전 단축어 포스트 단점 하나 더 찾음 소스코드가 없어서 포스트 내 글자수가 확 줄어들었다!]]></summary></entry><entry><title type="html">1148번 단어 만들기</title><link href="https://movingwoo.com/random-solve/java/2025/06/02/1148.html" rel="alternate" type="text/html" title="1148번 단어 만들기" /><published>2025-06-02T05:00:00+00:00</published><updated>2025-06-02T05:00:00+00:00</updated><id>https://movingwoo.com/random-solve/java/2025/06/02/1148</id><content type="html" xml:base="https://movingwoo.com/random-solve/java/2025/06/02/1148.html"><![CDATA[<blockquote>
  <h4 id="문제">문제</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-02-1148/img01.webp" alt="img01" /></p>

<p><a href="https://www.acmicpc.net/problem/1148">1148번 단어 만들기 - 백준</a></p>

<blockquote>
  <h4 id="설계">설계</h4>
  <hr />
</blockquote>

<p><span style="color: orange;"><strong>20만개</strong></span>의 사전 단어…<br />
이해가 안가는 점이 단어가 20만개인데 문제 분류가 구현/문자열이다?<br />
이게 되남??</p>

<p>믿을 수 없어서 20만개 순회하는 로직으로 제출해보니 메모리 초과가 났다.<br />
아니 또 시간이 문제가 아니라 메모리가 문제였네!<br />
맵과 리스트와 셋을 마구 쑤셔박으니 메모리가 터질 수 밖에</p>

<p><span style="color: orange;"><strong>비트마스크 ㄱㄱ</strong></span></p>

<blockquote>
  <h4 id="구현">구현</h4>
  <hr />
</blockquote>

<h5 id="1-단어와-사전">1. 단어와 사전</h5>

<p>단어 클래스를 구현해 사전에 넣는다.<br />
단어는 비트마스크와 문자 수를 가진다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    	
	<span class="k">try</span><span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
		<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">))){</span>
		
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Word</span><span class="o">&gt;</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
		
		<span class="c1">// 사전 채우기</span>
		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">String</span> <span class="n">word</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>

			<span class="n">dictionary</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Word</span><span class="o">(</span><span class="n">word</span><span class="o">));</span>
		<span class="o">}</span>
		
	<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
<span class="o">}</span>

<span class="c1">// Word class</span>
<span class="kd">static</span> <span class="kd">class</span> <span class="nc">Word</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">mask</span><span class="o">;</span>
	<span class="kt">int</span><span class="o">[]</span> <span class="n">count</span><span class="o">;</span>

	<span class="nc">Word</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
	<span class="o">}</span>

	<span class="nc">Word</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">();</span>
		
		<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
			<span class="c1">// 무조건 대문자로 들어옴</span>
			<span class="n">count</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'A'</span><span class="o">]++;</span>
			<span class="n">mask</span> <span class="o">|=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'A'</span><span class="o">));</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-메인-루프">2. 메인 루프</h5>

<p>퍼즐판을 입력받으면 단어와 마찬가지로 비트마스크와 단어 수를 계산한다.<br />
분해한 퍼즐판의 각 알파벳을 중앙글자로 삼아서 비교하고 최소, 최대 알파벳을 찾아 정렬 후 출력한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">puzzle</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">puzzle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'#'</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>

	<span class="c1">// 퍼즐판 비트마스크 변환</span>
	<span class="kt">int</span><span class="o">[]</span> <span class="n">puzzleCount</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
	<span class="kt">int</span> <span class="n">puzzleMask</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	
	<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
		<span class="n">puzzleCount</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'A'</span><span class="o">]++;</span>
		<span class="n">puzzleMask</span> <span class="o">|=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'A'</span><span class="o">));</span>
	<span class="o">}</span>

	<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">center</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

	<span class="c1">// 중심글자 하나씩 넣어보기</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">centerMask</span> <span class="o">=</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'A'</span><span class="o">));</span>
		<span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

		<span class="k">for</span> <span class="o">(</span><span class="nc">Word</span> <span class="n">w</span> <span class="o">:</span> <span class="n">dictionary</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// 알파벳 체크</span>
			<span class="k">if</span> <span class="o">((</span><span class="n">w</span><span class="o">.</span><span class="na">mask</span> <span class="o">&amp;</span> <span class="n">puzzleMask</span><span class="o">)</span> <span class="o">!=</span> <span class="n">w</span><span class="o">.</span><span class="na">mask</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			<span class="c1">// 중심글자 체크</span>
			<span class="k">if</span> <span class="o">((</span><span class="n">w</span><span class="o">.</span><span class="na">mask</span> <span class="o">&amp;</span> <span class="n">centerMask</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>

			<span class="kt">boolean</span> <span class="n">valid</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="c1">// 개수 체크</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">w</span><span class="o">.</span><span class="na">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">puzzleCount</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
					<span class="n">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
					<span class="k">break</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>

			<span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">)</span> <span class="n">count</span><span class="o">++;</span>
		<span class="o">}</span>

		<span class="n">center</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">// 최소값 최대값 찾기</span>
	<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">center</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
	<span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">center</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">minLetters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">maxLetters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

	<span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">:</span> <span class="n">center</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">min</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">minLetters</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span> <span class="o">{</span>
			<span class="n">minLetters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">max</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">maxLetters</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">()))</span> <span class="o">{</span>
			<span class="n">maxLetters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// 알파벳 순 정렬</span>
	<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">minLetters</span><span class="o">);</span>
	<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">maxLetters</span><span class="o">);</span>

	<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">minLetters</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">min</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
	<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">maxLetters</span><span class="o">)</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
	<span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">max</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <h4 id="채점">채점</h4>
  <hr />
</blockquote>

<p><img src="/assets/images/posts/random-solve/Java/2025-06-02-1148/img02.webp" alt="img02" /></p>

<blockquote>
  <h4 id="반성">반성</h4>
  <hr />
</blockquote>

<p>처음에 단순하게 20만개 사전 만든 후 순회하는 코드를 짰다가<br />
전체적인 틀을 유지하며 비트마스크로 바꿨더니 효율적으로 보이진 않는다.<br />
어쨌든 20만개를 저장해서 순회하는 식이니 말이다.</p>

<p>좀 더 빠르게 찾거나 사전을 압축하거나 할 수 있으면 더 빠를듯?<br />
하지만 어쨌든 풀었으니 그만둬야지</p>

<blockquote>
  <h4 id="코드-확인">코드 확인</h4>
  <hr />
</blockquote>

<p><a href="https://raw.githubusercontent.com/movingwoo/movingwoo-snippets/refs/heads/main/random-solve/Java/2025-06-02-1148.java">Link to GitHub</a></p>]]></content><author><name>movingwoo</name></author><category term="random-solve/Java/" /><summary type="html"><![CDATA[문제 1148번 단어 만들기 - 백준 설계 20만개의 사전 단어… 이해가 안가는 점이 단어가 20만개인데 문제 분류가 구현/문자열이다? 이게 되남?? 믿을 수 없어서 20만개 순회하는 로직으로 제출해보니 메모리 초과가 났다. 아니 또 시간이 문제가 아니라 메모리가 문제였네! 맵과 리스트와 셋을 마구 쑤셔박으니 메모리가 터질 수 밖에 비트마스크 ㄱㄱ 구현 1. 단어와 사전 단어 클래스를 구현해 사전에 넣는다. 단어는 비트마스크와 문자 수를 가진다. public static void main(String[] args) { try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))){ List&lt;Word&gt; dictionary = new ArrayList&lt;&gt;(); // 사전 채우기 while (true) { String word = br.readLine(); if (word.charAt(0) == '-') break; dictionary.add(new Word(word)); } } catch (IOException e) {} } // Word class static class Word { int mask; int[] count; Word() { this.count = new int[26]; } Word(String word) { this(); for (char c : word.toCharArray()) { // 무조건 대문자로 들어옴 count[c - 'A']++; mask |= (1 &lt;&lt; (c - 'A')); } } } 2. 메인 루프 퍼즐판을 입력받으면 단어와 마찬가지로 비트마스크와 단어 수를 계산한다. 분해한 퍼즐판의 각 알파벳을 중앙글자로 삼아서 비교하고 최소, 최대 알파벳을 찾아 정렬 후 출력한다. while (true) { String puzzle = br.readLine(); if (puzzle.charAt(0) == '#') break; // 퍼즐판 비트마스크 변환 int[] puzzleCount = new int[26]; int puzzleMask = 0; for (char c : puzzle.toCharArray()) { puzzleCount[c - 'A']++; puzzleMask |= (1 &lt;&lt; (c - 'A')); } Map&lt;Character, Integer&gt; center = new HashMap&lt;&gt;(); // 중심글자 하나씩 넣어보기 for (char c : puzzle.toCharArray()) { int centerMask = (1 &lt;&lt; (c - 'A')); int count = 0; for (Word w : dictionary) { // 알파벳 체크 if ((w.mask &amp; puzzleMask) != w.mask) continue; // 중심글자 체크 if ((w.mask &amp; centerMask) == 0) continue; boolean valid = true; // 개수 체크 for (int i = 0; i &lt; 26; i++) { if (w.count[i] &gt; puzzleCount[i]) { valid = false; break; } } if (valid) count++; } center.put(c, count); } // 최소값 최대값 찾기 int min = Collections.min(center.values()); int max = Collections.max(center.values()); List&lt;Character&gt; minLetters = new ArrayList&lt;&gt;(); List&lt;Character&gt; maxLetters = new ArrayList&lt;&gt;(); for (Map.Entry&lt;Character, Integer&gt; e : center.entrySet()) { if (e.getValue() == min &amp;&amp; !minLetters.contains(e.getKey())) { minLetters.add(e.getKey()); } if (e.getValue() == max &amp;&amp; !maxLetters.contains(e.getKey())) { maxLetters.add(e.getKey()); } } // 알파벳 순 정렬 Collections.sort(minLetters); Collections.sort(maxLetters); for (char ch : minLetters) sb.append(ch); sb.append(" ").append(min).append(" "); for (char ch : maxLetters) sb.append(ch); sb.append(" ").append(max).append("\n"); } 채점 반성 처음에 단순하게 20만개 사전 만든 후 순회하는 코드를 짰다가 전체적인 틀을 유지하며 비트마스크로 바꿨더니 효율적으로 보이진 않는다. 어쨌든 20만개를 저장해서 순회하는 식이니 말이다. 좀 더 빠르게 찾거나 사전을 압축하거나 할 수 있으면 더 빠를듯? 하지만 어쨌든 풀었으니 그만둬야지 코드 확인 Link to GitHub]]></summary></entry></feed>